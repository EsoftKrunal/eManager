<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>eManager-HRD</title>   
	<script type="text/javascript">
	    var FSO1 = new ActiveXObject("Scripting.FileSystemObject");
	</script>
        <script type="text/javascript" >
            function fncInputNumericValuesOnly(evnt) {
                if (!(event.keyCode == 45 || event.keyCode == 48 || event.keyCode == 49 || event.keyCode == 50 || event.keyCode == 51 || event.keyCode == 52 || event.keyCode == 53 || event.keyCode == 54 || event.keyCode == 55 || event.keyCode == 56 || event.keyCode == 57)) {
                    event.returnValue = false;
                }
            }
            function PutNewRow() {
                if (window.event.keyCode == 13)  //78
                {
                    document.getElementById('btnAddRow').click();

                }
            }
    </script>
    <style type="text/css">
        .lbl2 {font-family: Arial, Helvetica, sans-serif; font-size: 11pt; color: #003370; font-weight: bold; font-style:italic}
         body {font-size:12px; font-family:Arial;Color:#324242; margin : 0 0 0 0 ; font-weight:bold;}
        .shadow {background-repeat:repeat-x; border:solid 1px #4371a5; background-image : url(menu_gra.jpg); background-position:bottom; }
        .lbl {font-family: Arial, Helvetica, sans-serif; font-size: 11px; color: #003370; font-weight: bold; text-transform:uppercase;}
        .lbl1 {font-family: Arial, Helvetica, sans-serif; font-size: 9pt; color: #003370; font-weight: bold}
        .val  {font-family: Arial, Helvetica, sans-serif; font-size: 8pt; color: #003370; font-weight: normal}
        .val1 {font-family: Arial, Helvetica, sans-serif; font-size: 10pt; color: #003370; font-weight: normal}
        input {text-transform: uppercase;}
        .heading {font-size: 16pt; font-family: Verdana, Arial, Helvetica, sans-serif; color: #003370; font-weight: bold; text-align:center;}
        .comment {font-family:Verdana, Arial, Helvetica, sans-serif; font-size:9px; color:#003370; font-weight:normal; font-weight:bold;}
        .lbl2 {font-family: Arial, Helvetica, sans-serif; font-size: 8pt; color: #FF3333; font-weight: bold;}
        input {border:solid 1px #4371a5;font-family:Arial;font-size:10px; width:165px;}
        .SmallInput{border:solid 1px #4371a5;font-family:Arial;font-size:10px; width:100px;}
        .SmallInput50{border:solid 1px #4371a5;font-family:Arial;font-size:10px; width:50px;}
        
        select {border:solid 1px #4371a5;font-family:Arial;font-size:10px;}
        .Heading{font-size:16px;text-Align:Center;color: #A9682E; padding :3px; }
        .header{color:White;text-align:center;text-align:center; background-color :#7AAAD2}
        textarea {border:solid 1px #4371a5;font-family:Arial;font-size:10px;height:100px;}
        td{vertical-align:top;}
        
        #tblAddRowTable tr td table tr td{vertical-align:top; text-align:center}
    </style>
    <style type="text/css">
        .panel {
          border-width:1px;
          border-style:solid;
          border-color:#cce6ff #668099 #668099 #cce6ff;
          background-color:#7AAAD2;
        }
        .row_head {
          border-width:1px;
          border-style:solid;
          border-color:#f0f0f0;
          background-color:#7AAAD2;
        }
        .head {
          font-family:verdana;
          font-size:11px;
          font-weight:bold;
          text-align:center;
          color:#000000;
          background-color:#7AAAD2;
          cursor:default;
        }
        .arrow_prev {
          font-family:verdana;
          font-size:11px;
          width:12px;
          margin-right:1px;
          text-align:center;
          color:black;
          background-color:#FFFBD6;
          border-width:1px;
          border-style:solid;
          border-color:#cce6ff #668099 #668099 #cce6ff;
          padding:1px;
          cursor:pointer;
        }
        .arrow_prev_over {
          font-family:verdana;
          font-size:11px;
          width:12px;
          margin-right:1px;
          text-align:center;
          color:#ffffff;
          background-color:#afc6dd;
          border-width:1px;
          border-style:solid;
          border-color:#cce6ff #668099 #668099 #cce6ff;
          padding:1px;
          cursor:pointer;
        }
        .arrow_prev_down {
          font-family:verdana;
          font-size:11px;
          width:12px;
          margin-right:1px;
          text-align:center;
          color:black;
          background-color:#FFFBD6;
          border-width:1px;
          border-style:solid;
          border-color:#4b6077 #afc6dd #afc6dd #4b6077;
          padding:2px 0px 0px 2px;
          cursor:pointer;
        }
        .arrow_next {
          font-family:verdana;
          font-size:11px;
          width:12px;
          margin-left:1px;
          text-align:center;
          color:black;
          background-color:#FFFBD6;
          border-width:1px;
          border-style:solid;
          border-color:#cce6ff #668099 #668099 #cce6ff;
          padding:1px;
          cursor:pointer;
        }
        .arrow_next_over {
          font-family:verdana;
          font-size:11px;
          width:12px;
          margin-left:1px;
          text-align:center;
          color:#ffffff;
          background-color:#afc6dd;
          border-width:1px;
          border-style:solid;
          border-color:#cce6ff #668099 #668099 #cce6ff;
          padding:1px;
          cursor:pointer;
        }
        .arrow_next_down {
          font-family:verdana;
          font-size:11px;
          width:12px;
          margin-left:1px;
          text-align:center;
          color:#ffffff;
          background-color:#7e93aa;
          border-width:1px;
          border-style:solid;
          border-color:#4b6077 #afc6dd #afc6dd #4b6077;
          padding:2px 0px 0px 2px;
          cursor:pointer;
        }
        .row_week {
          border-width:1px;
          border-style:solid;
          border-color:#99b3cc #99b3cc #668099 #99b3cc;
        }
        .weekday {
          font-family:verdana;
          font-size:11px;
          width:23px;
          text-align:center;
          color:#ffffff;
          background-color:#7AAAD2;
          border:1px solid #99b3cc;
          padding:1px;
          cursor:default;
        }
        .row_day {
          padding:1px;
        }
        .day {
          font-family:verdana;
          font-size:11px;
          line-height:14px;
          width:23px;
          text-align:center;
          color:#000000;
          background-color:#f0f0f0;
          border:1px solid #f0f0f0;
          padding:1px;
          cursor:pointer;
        }
        .day_over {
          font-family:verdana;
          font-size:11px;
          line-height:14px;
          width:23px;
          text-align:center;
          color:#000000;
          background-color:#f0f0f0;
          border-width:1px;
          border-style:solid;
          border-color:#ffffff #c0c0c0 #c0c0c0 #ffffff;
          padding:1px;
          cursor:pointer;
        }
        .day_down {
          font-family:verdana;
          font-size:11px;
          line-height:14px;
          width:23px;
          text-align:center;
          color:#000000;
          background-color:#cfcfcf;
          border-width:1px;
          border-style:solid;
          border-color:#9c9c9c #ffffff #ffffff #9c9c9c;
          padding:1px;
          cursor:pointer;
        }
        .day_empty {
          font-family:verdana;
          font-size:11px;
          line-height:14px;
          width:23px;
          text-align:center;
          color:#f0f0f0;
          background-color:#f0f0f0;
          border:1px solid #f0f0f0;
          padding:1px;
          cursor:default;
        }
        .day_disabled {
          font-family:verdana;
          font-size:11px;
          line-height:14px;
          width:23px;
          text-align:center;
          text-decoration:line-through;
          color:#999999;
          background-color:#f0f0f0;
          border:1px solid #f0f0f0;
          padding:1px;
          cursor:default;
        }
        .day_current {
          font-family:verdana;
          font-size:11px;
          line-height:14px;
          width:23px;
          text-align:center;
          color:black;
          background-color:#FFFBD6;
          border-width:1px;
          border-style:solid;
          border-color:#cce6ff #668099 #668099 #cce6ff;
          padding:1px;
          cursor:pointer;
        }
        .day_special {
          font-family:verdana;
          font-size:11px;
          line-height:14px;
          width:23px;
          text-align:center;
          color:#ffffff;
          background-color:#cc9999;
          border-width:1px;
          border-style:solid;
          border-color:#ffcccc #996666 #996666 #ffcccc;
          padding:1px;
          cursor:pointer;
        }
        .day_other {
          font-family:verdana;
          font-size:9px;
          line-height:14px;
          width:23px;
          text-align:center;
          color:#999999;
          background-color:#f0f0f0;
          border:1px solid #f0f0f0;
          padding:1px;
          cursor:pointer;
        }
        .day_other_over {
          font-family:verdana;
          font-size:9px;
          line-height:14px;
          width:23px;
          text-align:center;
          color:#666666;
          background-color:#c0c0c0;
          border-width:1px;
          border-style:solid;
          border-color:#f0f0f0 #909090 #909090 #f0f0f0;
          padding:1px;
          cursor:pointer;
        }
        .day_other_current {
          font-family:verdana;
          font-size:9px;
          line-height:14px;
          width:23px;
          text-align:center;
          color:#666666;
          background-color:#c0c0c0;
          border-width:1px;
          border-style:solid;
          border-color:#f0f0f0 #909090 #909090 #f0f0f0;
          padding:1px;
          cursor:pointer;
        }
        .row_foot {
          margin:1px;
        }
        .foot {
          font-family:verdana;
          font-size:11px;
          width:50px;
          margin:0px 1px;
          text-align:center;
          color:black;
          background-color:#FFFBD6;
          border-width:1px;
          border-style:solid;
          border-color:#cce6ff #668099 #668099 #cce6ff;
          padding:1px;
          cursor:pointer;
        }
        .foot_over {
          font-family:verdana;
          font-size:11px;
          width:50px;
          margin:0px 1px;
          text-align:center;
          color:#ffffff;
          background-color:#afc6dd;
          border-width:1px;
          border-style:solid;
          border-color:#cce6ff #668099 #668099 #cce6ff;
          padding:1px;
          cursor:pointer;
        }
        .foot_down {
          font-family:verdana;
          font-size:11px;
          width:50px;
          margin:0px 1px;
          text-align:center;
          color:#ffffff;
          background-color:#7e93aa;
          border-width:1px;
          border-style:solid;
          border-color:#4b6077 #afc6dd #afc6dd #4b6077;
          padding:2px 0px 0px 2px;
          cursor:pointer;
        }
        .list {
          font-family:verdana;
          font-size:12px;
          color:#000000;
          background-color:#f0f0f0;
        }
        .info {
          font-size:10px;
          color:#000000;
          text-align:left;
          margin:2px 6px;
          padding:2px;
        }
        .tip_title {
          font-family:verdana;
          font-size:11px;
          text-align:center;
          color:#ffffff;
          background-color:#cc9999;
          border-width:1px;
          border-style:solid;
          border-color:#996666 #ffcccc #ffcccc #996666;
          padding:0px 3px;
        }
        .tip_box {
          filter:
            alpha(opacity:90)
            progid:DXImageTransform.Microsoft.RandomDissolve(duration=0.5);
          -moz-opacity:0.9;
          width:200px; height:100px;
          font-family:verdana;
          font-size:11px;
          text-align:left;
          color:#000000;
          background-color:#cfcfcf;
          border-width:1px;
          border-style:solid;
          border-color:#cce6ff #668099 #668099 #cce6ff;
          padding:3px;
          cursor:default;
          overflow:auto;
        }
        .time_list {
          font-family:verdana;
          font-size:12px;
        }

        #ta
        {
            height: 644px;
            width: 911px;
        }

    </style>
    <script language="javascript">
        // date format
        // -----------
        //xcDateFormat="yyyy-mm-dd";
        xcDateFormat = "mm/dd/yyyy";


        // css conf
        // --------
        xcCSSPanel = "panel";

        xcCSSHeadBlock = "row_head";
        xcCSSHead = "head";

        xcCSSArrowMonthPrev = ["arrow_prev", "arrow_prev_over", "arrow_prev_down"];
        xcCSSArrowMonthNext = ["arrow_next", "arrow_next_over", "arrow_next_down"];

        xcCSSArrowYearPrev = ["arrow_prev", "arrow_prev_over", "arrow_prev_down"];
        xcCSSArrowYearNext = ["arrow_next", "arrow_next_over", "arrow_next_down"];

        xcCSSWeekdayBlock = "row_week";
        xcCSSWeekday = "weekday";

        xcCSSDayBlock = "row_day";
        xcCSSDay = ["day", "day_over", "day_down", "day_disabled"];
        xcCSSDayCurrent = ["day_current", "", ""]; // on-over-down
        xcCSSDaySpecial = ["day_special", "day_over", "day_down", "day_disabled"];
        xcCSSDayOther = ["day_other", "day_other_over", "day_down", "day_disabled"];
        xcCSSDayOtherCurrent = ["day_other_current", "", ""];
        xcCSSDayOtherSpecial = ["", "", "", ""];   // on-over-down-off
        xcCSSDayEmpty = "day_empty";

        xcCSSVersion = "2.9";

        xcCSSFootBlock = "row_foot";
        xcCSSFootToday = ["foot", "foot_over", "foot_down"];
        xcCSSFootClear = ["foot", "foot_over", "foot_down"];
        xcCSSFootBack = ["foot", "foot_over", "foot_down"];
        xcCSSFootClose = ["foot", "foot_over", "foot_down"];
        xcCSSFootReset = ["foot", "foot_over", "foot_down"];
        xcCSSFootOther = [];

        // layout conf
        // -----------
        xcMonthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        xcMonthShortNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        xcMonthPrefix = "";
        xcMonthSuffix = "";

        xcYearDigits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
        xcYearPrefix = "";
        xcYearSuffix = "";

        xcHeadSeparator = " ";   // separator string between year and month
        xcHeadTagOrder = 1;      // 1: month/year, 0: year/month
        xcHeadTagAdjustment = 1; // 1: 100% width, 0: actual width

        xcArrowMonth = ["&#139;", "&#155;"];
        xcArrowYear = ["&#171;", "&#187;"];
        xcArrowSwitch = [1, 1];  // [year, month] 1:on, 0:off
        xcArrowPosition = 0;     // 0:in head block, 1:in foot block

        // names for days
        xcWeekdayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
        xcWeekdayShortNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
        xcWeekdayDisplay = ["S", "M", "T", "W", "T", "F", "S", "S"];

        // foot links
        xcFootTags = ["Today", "Clear", "Back", "Close", "Reset", "_Today_", "_Back_", "_Reset_"];
        xcFootTagSwitch = [1, 0, 0, 2, 0, 0, 0, 0]; // [today, clear, back, close, reset, _today_, _back_, _reset_] non-zero:display order, 0:off
        xcFootTagAdjustment = 0;                    // 1: % width, 0: actual width

        // customized foot links
        xcFootButtons = [];
        xcFootButtonSwitch = [];
        xcFootButtonLinks = [];

        // easy workaround for grid style
        xcGridWidth = 0;         // used as cellspacing

        // others
        xcBaseZIndex = 100;      // z-index for calendar layers
        xcMultiCalendar = 0;     // 1:multi-calendar, 0:single-calendar
        xcShowCurrentDate = 1;   // 1:highlight current date/today, 0:no highlight
        xcWeekStart = 0;         // 0:Sunday, 1:Monday
        xcAutoHide = 0;          // 0: no auto hide, non-zero:auto hide interval in ms
        xcStickyMode = 0;        // 0:non-sticky, 1:sticky
        xcShowPrevNextMonth = 1; // 0:not show, 1: show

        // day contents
        xcDayContents = ["&nbsp;", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"];
        xcDayContentsDisabled = xcDayContents;
        xcDayContentsCurrent = xcDayContents;

        // mod conf
        // --------
        xcModPath = "../script/";
        xcMods = [{ "order": 0, "mod": "Month/Year List", "script": "mod_list.js" },
                { "order": 0, "mod": "Date Range", "script": "mod_date.js" },
                { "order": 0, "mod": "Special Days", "script": "mod_days.js" },
                { "order": 0, "mod": "Date Info", "script": "mod_info.js" },
                { "order": 0, "mod": "Journal", "script": "mod_journal.js" },
                { "order": 0, "mod": "Date Link", "script": "mod_link.js" },
                { "order": 0, "mod": "Long Date Format", "script": "mod_long.js" },
                { "order": 0, "mod": "Tiles", "script": "mod_tiles.js" },
                { "order": 0, "mod": "Date Tips", "script": "mod_tips.js" },
                { "order": 0, "mod": "Time", "script": "mod_time.js"}];

        // Month/Year List Mod
        xcCSSMonthYearList = "list";

        xcMonthListFormat = "Month"; // Month, MONTH, Mon, Mon, mm
        xcYearListRange = 5;
        xcYearListPrevRange = "&#171;&nbsp;";
        xcYearListNextRange = "&nbsp;&#187;"
        function convertMMM(ob) {
            xcMonthShortNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var parts = ob.split('/');
            return parts[1] + '/' + xcMonthShortNames[parseFloat(parts[0]) - 1] + '/' + parts[2];
        }
        function convertMM(ob) {
            var parts = ob.split('/');
            var month;
            xcMonthShortNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var parts = ob.split('/');
            for (i = 0; i <= 11; i++) {
                if (xcMonthShortNames[i] == parts[1]) {
                    month = i + 1;
                    break;
                }
            }
            return '0' + month + '/' + parts[0] + '/' + parts[2];
        }
        // Date Link Mod & Journal Mod
        xcLinkBasePath = "";
        xcLinkTargetWindow = "_blank";
        xcLinkTargetWindowPara = "location=1,menubar=1,resizable=1,scrollbars=1,status=1,titlebar=1,toolbar=1";

        // Journal Mod
        xcLinkPrefix = "";
        xcLinkSuffix = ".html";
        //xcLinkDateFormat="yyyymmdd";
        xcLinkDateFormat = "mmddyyyy";



        // Date Tips Mod
        xcDateTipTiming = 1000;
        xcDateTipBoxTitleSwitch = 1; // 1: show title, 0:don't show
        xcDateTipBoxPosition = 6;    // 0:date top, 3:date right, 6:date bottom, 9:date left
        xcDateTipBoxAlign = 1;       // 0:left, 1:center, 2:right, for position of 0 and 6
        xcDateTipBoxValign = 0;      // 0:top, 1:middle, 2:bottom, for position of 3 and 9
        xcDateTipBoxOffsetX = 0;
        xcDateTipBoxOffsetY = 6;
        xcCSSDateTipBoxTitle = "tip_title";
        xcCSSDateTipBox = "tip_box";

        // Time Mod
        // xcHours=["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11",
        //          "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"];     // full list of hours
        // xcHours=["00", "03", "06", "09", "12", "15", "18", "21"];                             // simplified
        xcHours = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];  // for AM/PM setting
        //xcMinutes=["00", "01", "02", "03", "04", "05", "06", "07", "08", "09",
        //           "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", 
        //           "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", 
        //           "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", 
        //           "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", 
        //           "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"];                // full list of minutes
        xcMinutes = ["00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55"];      // simplified
        //xcSeconds=["00", "01", "02", "03", "04", "05", "06", "07", "08", "09",
        //           "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", 
        //           "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", 
        //           "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", 
        //           "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", 
        //           "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"];                // full list of seconds
        xcSeconds = ["00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55"];      // simplified
        xcAMPM = ["AM", "PM"];       // to be used when "am" presents in date format
        xcTimeBlockOrder = 1;        // foot link order for time block
        xcCSSTimeBlock = ["", "", ""]; // CSS classes for the block of select lists, ["mouse-out", "mouse-over", "mouse-down"]
        xcCSSTimeList = "time_list"; // CSS class for the select list

        // Popup-Window Version
        xcWindowWidth = 215;
        xcWindowHeight = 195;
        xcWindowTemplate = "../script/xc2_template.html"

        // tooltips
        xc_Today_is = "Today is ";
        xc_Clear_the_date_input = "Clear the date input";
        xc_Scroll_to = "Scroll to ";
        xc_Close_the_calendar = "Close the calendar";
        xc_Pick_the_default_date_of = "Pick the default date of ";
        xc_Today = "Today";
        xc_Scroll_to_this_date = "Scroll to this date";
        xc_Pick_the_default_date = "Pick the default date";

        var xcCalCopyright = "eSoft";
        var xcCalHome = "http://www.esoftech.com";
        var xcCopyrightDisplay = "&#169;";
        var xcShowCopyright = 1;

        var xcCore = 1;
        var xc_ax = new Array(), xc_fd = new Array(), xc_eg = {};
        var xc_bg = xc_df = xc_bs = null;
        var xc_dy = null;
        var xc_dl = xc_dm = xc_du = 0;
        var xc_fy = -1;
        var xc_dt = null;
        var xc_ca = ["", "100%", "50%", "33%", "25%", "20%"];
        var xc_fk = " CELLPADDING='0' CELLSPACING='0' BORDER='0'>";
        var xc_fl = " CELLPADDING='0' CELLSPACING='0' BORDER='0' ALIGN='CENTER'>";
        var xc_fm = " CELLPADDING='0' CELLSPACING='" + xcGridWidth + "' BORDER='0' ALIGN='CENTER'>"; var xc_fo = "<TABLE" + xc_fk; var xc_fp = "<TABLE" + xc_fl;
        var xc_fq = "<TABLE WIDTH='100%'" + xc_fl; var xc_fr = "<TABLE WIDTH='100%'" + xc_fm; var xc_fn = "</TABLE>"; var xc_fi = "<TR VALIGN='TOP'>";
        var xc_fj = "<TR ALIGN='CENTER' VALIGN='MIDDLE'>"; var xc_fh = "</TR>"; var xcCSSOpen = 'this.className="'; var xcCSSClose = '"';
        var xc_fs = /TR|TBODY|THEAD|TFOOT|TABLE/i; var xc_da = "yyyymmdd"; var xc_bv = "E", xc_ef = "R", xc_am = "1", xc_ds = "0";

        var xcNav = navigator.userAgent.toLowerCase(); var xcVer = parseInt(navigator.appVersion); var xcIsMac = (xcNav.indexOf("mac") != -1);
        var xcIsOpera = (xcNav.indexOf("opera") != -1); var xcIsSafari = (xcNav.indexOf("safari") != -1); var xcIsKon = (xcNav.indexOf("konqueror") != -1);
        var xcIsIE = (!xcIsOpera && !xcIsKon && xcNav.indexOf("msie") != -1); var xcIsIE4 = (xcIsIE && xcNav.indexOf("msie 4") != -1);
        var xcIsIE5 = (xcIsIE && !xcIsIE4); var xcIsIE55 = (xcIsIE && xcNav.indexOf("msie 5.5") != -1); var xcIsIE6 = (xcIsIE && xcNav.indexOf("msie 6") != -1);
        var xcIsIE55up = (xcIsIE55 || xcIsIE6); var xcIsIEMac = xcIsIE && xcIsMac;
        var xcIsN4 = (xcNav.indexOf('mozilla') != -1 && xcNav.search(/msie|gecko|opera|spoofer|compatible|webtv|hotjava/) == -1);
        var xcIsN6 = (xcNav.indexOf("gecko") != -1 && !xcIsSafari); var xcIsO7 = (xcIsOpera && xcNav.search(/opera[\s\/]+(\d+)/) != -1 ? parseFloat(RegExp.$1) >= 7 : false);
        var xcIsK3 = (xcIsKon && xcVer >= 3); var xcCalSafe = (xcIsN6 || xcIsIE5 || xcIsK3 || xcIsO7 || xcIsSafari) && !xcIsN4 && !xcIsIE4;
        var ab = new Array(), ac = new Array(), ad = new Array(); var ae = new Array(), af = new Array(), ag = new Array(); function xc_ga() { return true };
        function xc_en() { setTimeout("xc_dn()", 100) }; function xc_dn() {
            for (var i = 0; i < xc_ax.length; i++) {
                var du = xc_ax[i];
                if (du.gr.style.visibility == "visible" && du.hl != 2) { var l = xc_cj(du.gs); if (l != null) { xc_dp(du.gr, du.dx + xc_cm(l), du.dy + xc_cn(l)) } else { xc_cv(i) } } 
            }; xc_dy()
        };
        function xc_fv(e) { if (xcIsIE || xcIsK3 || xcIsOpera) { xc_dl = event.clientX + (xcIsK3 ? 0 : (document.documentElement ? document.documentElement.scrollLeft : document.body.scrollLeft)); xc_dm = event.clientY + (xcIsK3 ? 0 : (document.documentElement ? document.documentElement.scrollTop : document.body.scrollTop)) } else { xc_dl = e.pageX; xc_dm = e.pageY }; if (xc_dt) { xc_dt(e) } };
        function xc_fz() { if (xc_fy < 0) { xc_fy = document.getElementsByTagName("SELECT").length + document.getElementsByTagName("OBJECT").length + document.getElementsByTagName("APPLET").length + document.getElementsByTagName("EMBED").length }; return (xc_fy > 0) }; function xc_cj(id) { return id == "" ? null : document.getElementById(id) }; function xc_cm(l, gk) { if (xcIsIEMac) { if (xc_fs.test(l.tagName)) { gk = 1 }; var x = l.offsetLeft; if (l.tagName == "TD" && typeof (gk) == "undefined") { x += xc_cm(l.parentElement, 1) } else if (l.offsetParent) { x += xc_cm(l.offsetParent, gk) } else { x += isNaN(parseInt(document.body.style.marginLeft)) ? parseInt(document.body.leftMargin) : parseInt(document.body.style.marginLeft) }; return x } else { return l.offsetLeft + (l.offsetParent ? xc_cm(l.offsetParent) : 0) } }; function xc_cn(l, gk) { if (xcIsIEMac) { if (xc_fs.test(l.tagName)) { gk = 1 }; var x = l.offsetTop; if (l.tagName == "TD" && typeof (gk) == "undefined") { x += xc_cn(l.parentElement, 1) } else if (l.offsetParent) { x += xc_cn(l.offsetParent, gk) } else { x += isNaN(parseInt(document.body.style.marginTop)) ? parseInt(document.body.topMargin) : parseInt(document.body.style.marginTop) }; return x } else { return l.offsetTop + (l.offsetParent ? xc_cn(l.offsetParent) : 0) } }; function xc_gd(l, cp) { l.innerHTML = cp }; function xc_dp(l, x, y) { l.style.top = y + "px"; l.style.left = x + "px" }; function xc_do(l, x, y) { l.style.top = (parseInt(l.style.top) + y) + "px"; l.style.left = (parseInt(l.style.left) + x) + "px" }; function xc_ez(l) { l.style.visibility = "visible" }; function xc_cw(l) { l.style.visibility = "hidden" }; function xc_db() { var l = document.createElement("DIV"); with (l.style) { position = "absolute"; visibility = "hidden"; left = "-1000px"; top = "-1000px"; zIndex = ++xcBaseZIndex }; if (xcIsIE && !xcIsMac) { document.body.insertBefore(l, document.body.firstChild) } else { document.body.appendChild(l) }; l.gy = null; if (xcIsIE55up && xc_fz() && !xcIsMac) { l.gy = document.createElement("IFRAME"); l.gy.src = "javascript:false"; with (l.gy.style) { position = "absolute"; visibility = "hidden"; left = "-1000px"; top = "-1000px"; width = "20px"; height = "20px"; zIndex = l.style.zIndex - 1; filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)" }; document.body.insertBefore(l.gy, l); l.gy.iz = false }; return l }; function xc_cd(n) { return ((n < 10) ? "0" : "") + n }; function xc_bt(y, m, d) { return xcWeekdayShortNames[(new Date(y, m, d)).getDay()] }; function xc_cp() { var ho = {}; for (var i = 0; i < xcMonthShortNames.length; i++) { ho[xcMonthShortNames[i].toLowerCase()] = i }; return ho }; function xc_de(mon) { if (xc_df == null) { xc_df = xc_cp() }; return xc_df[mon.toLowerCase()] || 0 }; function xc_cg() { var ev = {}; for (var i = 0; i < xcWeekdayShortNames.length - 1; i++) { ev[xcWeekdayShortNames[i].toLowerCase()] = i }; return ev }; function xc_br(day) { if (xc_bs == null) { xc_bs = xc_cg() }; return xc_bs[day.toLowerCase()] || 0 }; function xc_ft(ji, style, fp, title) { return "<" + ji + " " + fp + " " + (title ? "TITLE='" + title.replace(/'/g, '&#39;') + "' " : "") + (style ? "CLASS='" + style + "'" : "") + ">" }; function xc_be(style, fp, title) { return xc_ft("DIV", style, fp || "", title || "") }; var xc_bd = "</DIV>"; function xcDIV(style, cp, fp, title) { return xc_be(style, fp || "", title || "") + cp + xc_bd }; function xc_fg(style, cp, width, fp, title) { return "<TD" + (width != "" ? " WIDTH='" + width + "'" : "") + ">" + xcDIV(style, cp, fp || "", title || "") + "</TD>" }; function xc_fc(a, b) { return a.order - b.order }; function xc_ck(y, m, d) { return y + xc_cd(m + 1) + xc_cd(d) }; function xc_bx(gx) { return xc_ax[gx] }; function xc_cb(it, jk, ir, fe, gs, dx, dy, hl) { var du = null; for (var i = 0; i < xc_ax.length; i++) { if (xc_ax[i].kd || xc_ax[i].jk == jk && jk != null || xcMultiCalendar == 0 && xc_ax[i].hl == 1) { du = xc_ax[i]; du.kd = false; break } }; if (du == null) { du = new xc_av(xc_ax.length); xc_ax[xc_ax.length] = du } else { du.iv() }; du.cn = xc_eg[it] || {}; du.jk = jk || null; du.ir = ir || jk; du.fe = fe || ""; du.gs = gs || ""; du.dx = dx || 0; du.dy = dy || 0; du.hl = hl; return du }; function xc_eh(it, hj, bd, value, hl) { if (typeof (xc_eg[it]) == "undefined") { xc_eg[it] = {} }; if (typeof (xc_eg[it][hj]) == "undefined") { xc_eg[it][hj] = {} }; if (hl == 0) { xc_eg[it][hj][bd] = value } else if (hl == 1) { if (typeof (xc_eg[it][hj][bd]) == "undefined") { xc_eg[it][hj][bd] = new Array() }; xc_eg[it][hj][bd][xc_eg[it][hj][bd].length] = value } else if (hl == 2) { if (typeof (xc_eg[it][hj][bd]) == "undefined") { xc_eg[it][hj][bd] = "" }; xc_eg[it][hj][bd] += value } }; function aj(f) { var ec = f || xcDateFormat; ec = ec.replace(/\\/g, '\\\\'); ec = ec.replace(/\//g, '\\\/'); ec = ec.replace(/\[/g, '\\\['); ec = ec.replace(/\]/g, '\\\]'); ec = ec.replace(/\(/g, '\\\('); ec = ec.replace(/\)/g, '\\\)'); ec = ec.replace(/\{/g, '\\\{'); ec = ec.replace(/\}/g, '\\\}'); ec = ec.replace(/\</g, '\\\<'); ec = ec.replace(/\>/g, '\\\>'); ec = ec.replace(/\|/g, '\\\|'); ec = ec.replace(/\*/g, '\\\*'); ec = ec.replace(/\?/g, '\\\?'); ec = ec.replace(/\+/g, '\\\+'); ec = ec.replace(/\^/g, '\\\^'); ec = ec.replace(/\$/g, '\\\$'); ec = ec.replace(/dd/gi, '\\d\\d'); ec = ec.replace(/mm/gi, '\\d\\d'); ec = ec.replace(/yyyy/gi, '\\d\\d\\d\\d'); ec = ec.replace(/yy/gi, '\\d\\d'); ec = ec.replace(/day/gi, '\\w\\w\\w'); ec = ec.replace(/mon/gi, '\\w\\w\\w'); ec = ec.replace(/hr/gi, '\\d\\d'); ec = ec.replace(/mi/gi, '\\d\\d'); ec = ec.replace(/ss/gi, '\\d\\d'); ec = ec.replace(/am/gi, '\\w\\w'); return ec }; function xc_ce(f) { if (xc_bg == null) { xc_bg = new RegExp('^' + aj(f) + '$') }; return xc_bg }; function xc_cs(date, ec) { var y, m, d, aa = ec || xcDateFormat; var ki = aa.search(/yyyy/i); var he = aa.search(/mm/i); var hd = aa.search(/mon/i); var dw = aa.search(/dd/i); y = date.substring(ki, ki + 4) - 0; if (he != -1) { m = date.substring(he, he + 2) - 1 } else { m = xc_de(date.substring(hd, hd + 3)) - 0 }; d = date.substring(dw, dw + 2) - 0; return new Array(y, m, d) }; function xc_cf(y, m, d, ec) { var aa = ec || xcDateFormat; aa = aa.replace(/yyyy/i, y); aa = aa.replace(/mm/i, xc_cd(m + 1)); aa = aa.replace(/MON/, xcMonthShortNames[m].toUpperCase()); aa = aa.replace(/mon/i, xcMonthShortNames[m]); aa = aa.replace(/dd/i, xc_cd(d)); aa = aa.replace(/DAY/, xc_bt(y, m, d).toUpperCase()); aa = aa.replace(/day/i, xc_bt(y, m, d)); return aa }; function xc_fw(date, ed, ee) { if (date == "") { return "" }; var hw = xc_cs(date, ed); return xc_cf(hw[0], hw[1], hw[2], ee) }; function xc_ct(y) { var kl = y + ""; return xcYearDigits[kl.charAt(0)] + xcYearDigits[kl.charAt(1)] + xcYearDigits[kl.charAt(2)] + xcYearDigits[kl.charAt(3)] }; function xc_av(gx) { this.gx = gx; this.jk = null; this.ir = null; this.fe = ""; this.gs = ""; this.dx = 0; this.dy = 0; this.hl = 1; this.js = 0; this.kj = 0; this.month = 0; this.date = ""; this.kd = false; this.ha = ""; this.ch = 0; this.cf = 0; this.cd = 0; this.ce = 0; this.cg = 0; this.fh = null; this.gr = xc_db(); this.gr.bj = this; if (xcIsIE55up && !xcIsMac) { this.gr.onmouseenter = xc_ek; this.gr.onmouseleave = xc_ev } else { this.gr.onmouseover = xc_ek; this.gr.onmouseout = xc_ev }; this.cn = {}; this.ge = xc_cc; this.iy = xc_ey; this.bh = xc_ak; this.aq = xc_ag; this.ci = xc_ba; this.ej = xc_bj; this.ek = xc_bk; this.ja = xc_fe; this.hr = xc_dk; this.hq = xc_dj; this.cl = xc_dh; this.iv = xc_el; this.iu = xc_ej; this.cj = xc_bb; this.gd = xcGet; this.bf = xc_ai; this.ao = xc_ae; this.kb = xc_fx; this.bi = xc_al; this.ar = xc_ah; this.ix = xc_eo; this.bg = xc_aj; this.ap = xc_af; this.bw = xc_aw; this.bm = xc_aq; this.bz = xc_az(); this.br = xc_at; this.by = xc_ay; this.bv = xc_au; this.bk = xc_ao; this.bl = xc_ap; this.eq = xc_bq; this.bq = xc_as; this.bp = xc_ar; this.am = xc_ab; this.an = xc_ac }; function xc_cc(hj, bd) { return typeof (this.cn[hj]) != "undefined" ? this.cn[hj][bd] || null : null }; function xc_bj() { return false }; function xc_bk(date) { return false }; function xc_fe() { var gj = null; for (var i = 0; i < xc_fd.length; i++) { gj = xc_fd[i](this); if (gj) { break } }; return gj }; function xc_ba(ff) { }; function xc_dk() { return "" }; function xc_dj() { return "" }; function xc_dh() { return ["", 1] }; function xc_ak() { }; function xc_ag() { }; function xc_ey() { var dx = this.dx, dy = this.dy, l = xc_cj(this.gs); var dv = "", ia = null, bx = xc_ce(), bo = ""; if (l != null) { dx += xc_cm(l); dy += xc_cn(l) } else { dx += xc_dl; dy += xc_dm }; this.bf(); bo = this.ao(this.gd() || this.fe); if (this.ha == "") { this.ha = bo ? bo : getCurrentDate() }; if (bo != "" && bx.test(bo)) { var iq = xc_cs(bo); ia = new Date(iq[0], iq[1], iq[2]) } else { ia = new Date() }; dv = xc_ck(ia.getFullYear(), ia.getMonth(), ia.getDate()); this.kj = ia.getFullYear(); this.month = ia.getMonth(); this.ci(0); if (this.kj != ia.getFullYear() || this.month != ia.getMonth()) { ia = new Date(this.kj, this.month, 1); dv = "" }; if (this.hl == 2) { this.fh = l; l.innerHTML = this.br() + this.bk(dv) + this.bq() } else { var h = this.gr; xc_dp(h, dx, dy); xc_gd(h, this.br() + this.bk(dv) + this.bq()); h.style.zIndex = ++xcBaseZIndex; if (h.gy) { if (!h.gy.iz) { h.gy.style.width = h.offsetWidth + "px"; h.gy.style.height = h.offsetHeight + "px"; h.gy.iz = true }; xc_dp(h.gy, dx, dy); h.gy.style.zIndex = h.style.zIndex - 1 }; this.bh(); if (h.gy) { xc_ez(h.gy) }; xc_ez(h); this.aq() } }; function xc_el() { this.cj(); this.jk = null; this.ir = null; this.fe = ""; this.gs = ""; this.dx = 0; this.dy = 0; this.hl = 1; this.kj = 0; this.month = 0; this.date = ""; this.kd = false; this.ha = ""; this.ch = 0; this.cf = 0; this.cd = 0; this.ce = 0; this.cg = 0; this.cn = {} }; function xc_ej() { this.cj(); this.kd = true }; function xc_bb() { if (this.js) { clearTimeout(this.js); this.js = 0 } }; function xc_aj() { }; function xc_af() { }; function xc_eo() { var date = new Date(this.kj, this.month, 1); var dv = "", ak = null, bx = xc_ce(), bo = ""; this.bf(); bo = this.ao(this.gd() || this.ha || this.fe); if (bo != "" && bx.test(bo)) { var iq = xc_cs(bo); ak = new Date(iq[0], iq[1], iq[2]) } else { ak = new Date() }; dv = xc_ck(ak.getFullYear(), ak.getMonth(), ak.getDate()); this.bg(); if (this.hl == 2) { this.fh.innerHTML = this.br() + this.bk(dv) + this.bq() } else { xc_gd(this.gr, this.br() + this.bk(dv) + this.bq()); xc_ez(this.gr) }; this.ap() }; function xc_ai() { beforeGetDateValue(this.ir, this.jk, this.gx) }; function xc_ae(date) { return afterGetDateValue(this.ir, this.jk, date, this.gx) }; function xc_ch(fq) { return fq ? getDateValue(fq) : "" }; function xcGet() { return xc_ch(this.ir) || xc_ch(this.jk) }; function xc_al(date) { return beforeSetDateValue(this.ir, this.jk, date, this.gx) }; function xc_ah(date) { afterSetDateValue(this.ir, this.jk, date, this.gx) }; function xc_fx(date) { if (this.jk) { setDateValue(this.jk, date) } }; function xc_bq(style, cp, width, fp) { return xc_fg(style, cp, width, fp) }; function xc_ab() { return "" }; function xc_ac() { return "" }; function xc_aw() { return xc_fo + xc_fi + "<TD>" + this.am() + xc_be(xcCSSPanel) + (xcIsIEMac ? xc_fo + xc_fi + "<TD>" : "") }; function xc_aq() { return (xcIsIEMac ? "</TD>" + xc_fh + xc_fn : "") + xc_bd + this.an() + "</TD>" + xc_fh + xc_fn }; function xc_ev() { if (xcAutoHide && this.bj.hl == 1) { this.bj.js = setTimeout("xc_cv(" + this.bj.gx + ")", xcAutoHide) } }; function xc_ek() { if (xcAutoHide) { this.bj.cj() } }; function xc_di(df, dc, de, fo, fm, fn) { var s = ""; if (df || fo) { s += (xcIsIE55up && !xcIsMac) ? " onmouseenter='" : " onmouseover='"; if (df) { s += xcCSSOpen + df + xcCSSClose + ";" }; if (fo) { s += fo }; s += "' " }; if (dc) { s += " onmousedown='" + xcCSSOpen + dc + xcCSSClose + "' " }; if (fm) { s += " onclick='" + fm + "' " }; if (de || fn) { s += (xcIsIE55up && !xcIsMac) ? " onmouseleave='" : " onmouseout='"; if (de) { s += xcCSSOpen + de + xcCSSClose + ";" }; if (de) { s += fn }; s += "' " }; return s }; function xc_an(gx) { var ij = "xc_dr(" + gx + ",-1)", hv = "xc_dr(" + gx + ",1)"; var ig = "xc_dq(" + gx + ",-1)", hs = "xc_dq(" + gx + ",1)"; var bc = "", bb = ""; if (xcArrowSwitch[0] == 1) { var az = xcCSSArrowYearPrev, ay = xcCSSArrowYearNext; bc = xc_fg(az[0], xcArrowYear[0], "", xc_di(az[1], az[2], az[0], "", ij, "")); bb = xc_fg(ay[0], xcArrowYear[1], "", xc_di(ay[1], ay[2], ay[0], "", hv, "")) }; if (xcArrowSwitch[1] == 1) { var ax = xcCSSArrowMonthPrev, aw = xcCSSArrowMonthNext; bc += xc_fg(ax[0], xcArrowMonth[0], "", xc_di(ax[1], ax[2], ax[0], "", ig, "")); bb = xc_fg(aw[0], xcArrowMonth[1], "", xc_di(aw[1], aw[2], aw[0], "", hs, "")) + bb }; return [bc, bb] }; function xc_au() { var yy = xcYearPrefix + xc_ct(this.kj) + xcYearSuffix, mm = xcMonthPrefix + xcMonthNames[this.month] + xcMonthSuffix; return xc_fg(xcCSSHead, xcHeadTagOrder == 1 ? mm + xcHeadSeparator + yy : yy + xcHeadSeparator + mm, xcHeadTagAdjustment == 1 ? "100%" : "") }; function xc_ay() { var ba = ["", ""]; if (xcArrowPosition == 0) { ba = xc_an(this.gx) }; s = xc_be(xcCSSHeadBlock) + (xcHeadTagAdjustment == 1 ? xc_fq : xc_fp) + xc_fj; s += ba[0]; s += this.bv(); s += ba[1]; s += xc_fh + xc_fn + xc_bd; return s }; function xc_az() { var s = xc_be(xcCSSWeekdayBlock) + xc_fr + xc_fi; for (var i = xcWeekStart; i < xcWeekStart + 7; i++) { s += xc_fg(xcCSSWeekday, xcWeekdayDisplay[i], "") }; s += xc_fh + xc_fn + xc_bd; return s }; function xc_at() { return this.bw() + this.by() + this.bz }; function xc_ap(hl, dv) { var s = "", gx = this.gx; if (hl == xc_ef) { var bn = 'this.title="' + xcCalCopyright + '"'; var bt = 'window.open("' + xcCalHome + '")'; s = this.eq(ac["on"], xcCopyrightDisplay, "", xc_di(ac["hy"], ac["fj"], ac["on"], bn, bt, "")) } else if (hl == xc_bv) { s = this.eq(xcCSSDayEmpty, xcDayContents[0], "") } else { var ej = this.ej(), cw = this.ja(); var fo = this.hr(), fn = this.hq(), ah = this.cl(); var fm = ah[0] + (ah[1] ? "xc_ed(" + gx + ",\"" + this.date + "\");" : ""); var ca = null, cb = null, cc = null, cd = null; if (ej) { cd = hl == xc_am ? ab : ae; if (cw) { ca = cw[1].split(":"); cb = hl == xc_am ? ca[0] : ca[1]; cc = hl == xc_am ? ad : ag; s = this.eq(cb || cc["hx"] || cd["hx"] || ab["hx"], xcDayContentsDisabled[this.cd], "") } else { s = this.eq(cd["hx"] || ab["hx"], xcDayContentsDisabled[this.cd], "") } } else if (dv == this.date && xcShowCurrentDate) { cc = hl == xc_am ? ac : af; cd = ac; s = this.eq(cc["on"] || cd["on"], xcDayContentsCurrent[this.cd], "", xc_di(cc["hy"] || cd["hy"], cc["fj"] || cd["fj"], cc["on"] || cd["on"], fo, fm, fn)) } else if (cw) { ca = cw[0].split(":"); cb = hl == xc_am ? ca[0] : ca[1]; cc = hl == xc_am ? ad : ag; cd = hl == xc_am ? ab : ae; s = this.eq(cb || cc["on"] || cd["on"], xcDayContents[this.cd], "", xc_di(cc["hy"] || cd["hy"], cc["fj"] || cd["fj"], cb || cc["on"] || cd["on"], fo, fm, fn)) } else { cc = hl == xc_am ? ab : ae; cd = ab; s = this.eq(cc["on"] || cd["on"], xcDayContents[this.cd], "", xc_di(cc["hy"] || cd["hy"], cc["fj"] || cd["fj"], cc["on"] || cd["on"], fo, fm, fn)) } }; return s }; function xc_ao(dv) { var dayOffset = 0, er = 1, fs = (new Date(this.kj, this.month, 1)).getDay(); var jl = new Date(this.kj, this.month + 1, 0), hb = jl.getDate(); var ig = new Date(this.kj, this.month, 0), ii = ig.getFullYear(), ih = ig.getMonth(), ic = ig.getDate(); var hs = new Date(this.kj, this.month + 1, 1), hu = hs.getFullYear(), ht = hs.getMonth(); if (xcWeekStart > 0 && fs == 0) { fs = 7 }; var s = xc_be(xcCSSDayBlock) + xc_fr; for (var i = 0; i < 6; i++) { this.cg = i; s += xc_fi; for (var j = xcWeekStart; j < xcWeekStart + 7; j++) { this.ce = j; this.date = ""; if (i == 5 && j == xcWeekStart + 6 && xcShowCopyright) { s += this.bl(xc_ef) } else if (i * 7 + j < fs || er > hb) { if (xcShowPrevNextMonth && i * 7 + j < fs) { dayOffset = i * 7 + j - fs + 1; this.ch = ii; this.cf = ih; this.cd = ic + dayOffset; this.date = xc_ck(this.ch, this.cf, this.cd); s += this.bl(xc_ds, dv) } else if (xcShowPrevNextMonth && er > hb) { this.ch = hu; this.cf = ht; this.cd = (er++) - hb; this.date = xc_ck(this.ch, this.cf, this.cd); s += this.bl(xc_ds, dv) } else { s += this.bl(xc_bv) } } else { this.ch = this.kj; this.cf = this.month; this.cd = er++; this.date = xc_ck(this.ch, this.cf, this.cd); s += this.bl(xc_am, dv) } }; s += xc_fh }; s += xc_fn + xc_bd; return s }; function xc_ar() { var s = "", fz = 0, gb = xcCSSFootToday, fu = xcCSSFootClear, ft = xcCSSFootBack, fv = xcCSSFootClose, fy = xcCSSFootReset; var ga = xcFootTagSwitch.concat(xcFootButtonSwitch); for (var i = 0; i < ga.length; i++) { if (ga[i]) { fz++ } }; if (fz > 0) { var gx = this.gx, jy = gf(new Date()), fe = gf(toJSDate(this.fe)), ha = gf(toJSDate(this.ha)); var jz = "xc_ed(" + gx + ",\"" + xc_fw(getCurrentDate(), xcDateFormat, xc_da) + "\")", ck = "xc_bc(" + gx + ")", be = "xc_es(" + gx + ")", cm = "xc_cv(" + gx + ")", iw = "xc_em(" + gx + ")"; var ai = [{ "order": ga[0], "fg": xcFootTags[0], "cb": jz, "ka": xc_Today_is + jy, "ds": gb[0], "dt": gb[1], "dr": gb[2] }, { "order": ga[1], "fg": xcFootTags[1], "cb": ck, "ka": xc_Clear_the_date_input, "ds": fu[0], "dt": fu[1], "dr": fu[2] }, { "order": ga[2], "fg": xcFootTags[2], "cb": be, "ka": xc_Scroll_to + ha, "ds": ft[0], "dt": ft[1], "dr": ft[2] }, { "order": ga[3], "fg": xcFootTags[3], "cb": cm, "ka": xc_Close_the_calendar, "ds": fv[0], "dt": fv[1], "dr": fv[2] }, { "order": ga[4], "fg": xcFootTags[4], "cb": iw, "ka": xc_Pick_the_default_date_of + fe, "ds": fy[0], "dt": fy[1], "dr": fy[2] }, { "order": ga[5], "fg": jy, "cb": jz, "ka": xc_Today, "ds": gb[0], "dt": gb[1], "dr": gb[2] }, { "order": ga[6], "fg": ha, "cb": be, "ka": xc_Scroll_to_this_date, "ds": ft[0], "dt": ft[1], "dr": ft[2] }, { "order": ga[7], "fg": fe, "cb": iw, "ka": xc_Pick_the_default_date, "ds": fy[0], "dt": fy[1], "dr": fy[2]}]; for (var i = 0; i < xcFootButtonSwitch.length; i++) { ai[ai.length] = { "order": xcFootButtonSwitch[i], "fg": typeof (xcFootButtons[i]) == "function" ? xcFootButtons[i](this.jk, this.ir, this.fe, this.ha, this.gx) : xcFootButtons[i], "cb": xcFootButtonLinks[i] == null ? "" : "xc_bz(" + gx + "," + i + ")", "ka": "", "ds": xcCSSFootOther[i][0], "dt": xcCSSFootOther[i][1], "dr": xcCSSFootOther[i][2]} }; var fx = ai.sort(xc_fc); var ba = ["", ""]; if (xcArrowPosition == 1) { ba = xc_an(gx) }; w = xcFootTagAdjustment == 1 ? xc_ca[fz > 5 ? 5 : fz] : ""; s += xc_be(xcCSSFootBlock) + (xcFootTagAdjustment == 0 ? xc_fp : xc_fq) + xc_fj; s += ba[0]; for (var i = 0; i < fx.length; i++) { if (fx[i].order != 0) { s += xc_fg(fx[i].ds, fx[i].fg, w, xc_di(fx[i].dt, fx[i].dr, fx[i].ds, "", fx[i].cb, ""), fx[i].ka) } }; s += ba[1]; s += xc_fh + xc_fn + xc_bd }; return s }; function xc_as() { return this.bp() + this.bm() }; function xc_dr(gx, dy) { var du = xc_bx(gx); du.kj += dy; du.ci(dy); du.ix() }; function xc_dq(gx, dm) { var du = xc_bx(gx); du.month += dm; if (du.month < 0) { du.month = 11; du.kj-- }; if (du.month > 11) { du.month = 0; du.kj++ }; du.ci(dm); du.ix() }; function xc_bc(gx) { var du = xc_bx(gx); du.bi(""); du.kb(""); du.ar(""); du.ha = ""; if (du.hl == 1 && !xcStickyMode) { xc_cv(gx) } else { du.ix() } }; function xc_ed(gx, date) { var du = xc_bx(gx); var eo = xc_cs(date, xc_da); du.kj = eo[0]; du.month = eo[1]; if (du.ek(date)) { du.ix(); return }; var bo = du.bi(xc_fw(date, xc_da, xcDateFormat)); du.kb(bo); du.ar(bo); du.ha = bo; if (du.hl == 1 && !xcStickyMode) { xc_cv(gx) } else { du.ix() } }; function xc_es(gx) { var du = xc_bx(gx), d = xc_cs(du.ha || getCurrentDate()); du.kj = d[0]; du.month = d[1]; du.ix() }; function xc_em(gx) { var du = xc_bx(gx), d = xc_cs(xc_ce().test(du.fe) ? du.fe : getCurrentDate()); du.kj = d[0]; du.month = d[1]; xc_ed(gx, xc_ck(d[0], d[1], d[2])) }; function xc_cv(gx) { var du = xc_bx(gx), h = du.gr; if (du.hl == 1) { if (h.gy) { xc_cw(h.gy) }; xc_cw(h); du.iu() } }; function xc_bz(gx, i) { var du = xc_bx(gx), fw = xcFootButtonLinks[i]; fw(du.jk, du.ir, du.fe, du.ha, gx); if (du.hl == 1 && !xcStickyMode) { xc_cv(gx) } else { du.ix() } }; function showCalendar(it, jk, ir, fe, gs, dx, dy, hl) { if (!xcCalSafe) { return }; if (!xc_du) { xc_du = 1; xc_dy = window.onresize ? window.onresize : xc_ga; window.onresize = xc_en }; var du = xc_cb(it, jk, ir, fe, gs, dx, dy, hl); du.iy() }; function hideCalendars() { for (var i = 0; i < xc_ax.length; i++) { if (!xc_ax[i].kd && xc_ax[i].hl == 1) { xc_ax[i].iv(); xc_cv(i) } } };
        function toCalendarDate(date) { return xc_cf(date.getFullYear(), date.getMonth(), date.getDate()) }; var toCalDate = toCalendarDate;
        function toJSDate(date) { var bx = xc_ce(); if (bx.test(date)) { var d = xc_cs(date); return (new Date(d[0], d[1], d[2])) } else { return (new Date()) } };
        function getCurrentDate() { return toCalendarDate(new Date()) };
        function gf(date) { return date.getFullYear() + "-" + xc_cd(date.getMonth() + 1) + "-" + xc_cd(date.getDate()) };
        function checkDate(date) { if (date) { var bx = xc_ce(); if (bx.test(date)) { return 0 } else { return 1 } } else { return 2 } };
        function compareDates(dz, ea) { var bx = xc_ce(); var d1 = getDateNumbers(bx.test(dz) ? dz : getCurrentDate()).join(""); var d2 = getDateNumbers(bx.test(ea) ? ea : getCurrentDate()).join(""); return (d1 == d2 ? 0 : d1 > d2 ? 1 : -1) };
        function getDateNumbers(date) { var bx = xc_ce(); if (bx.test(date)) { var d = xc_cs(date); return new Array(xc_cd(d[0]), xc_cd(d[1] + 1), xc_cd(d[2])) } else { return new Array("", "", "") } }; var getNumbers = getDateNumbers; function beforeGetDateValue(ir, jk, gx) { }; function afterGetDateValue(ir, jk, date, gx) { return date };
        function getDateValue(fq) { return convertMM(fq.value) };
        function beforeSetDateValue(ir, jk, date, gx) { return date };
        function afterSetDateValue(ir, jk, date, gx) { };
        function setDateValue(fq, date) { fq.value = convertMMM(date); };
        function xc_ei() { if (xcIsN6) { document.captureEvents(Event.MOUSEMOVE) }; if (document.onmousemove) { xc_dt = document.onmousemove }; document.onmousemove = xc_fv }; if (xcCalSafe) { xc_ex(); xc_ei(); var hk = xcMods.sort(xc_fc); for (var i = 0; i < hk.length; i++) { if (hk[i].order != 0) { document.write("<scr" + "ipt language='javascript' src='" + xcModPath + hk[i].script + "' type='text/javascript'><\/scr" + "ipt>") } } };
        function xc_ex() { var ex = xcCSSDay, es = xcCSSDayCurrent, ey = xcCSSDayOther, fb = xcCSSDaySpecial; ab["on"] = ex[0]; ab["hy"] = ex[1]; ab["fj"] = ex[2]; ab["hx"] = ex[3]; ac["on"] = es[0]; ac["hy"] = es[1]; ac["fj"] = es[2]; if (typeof (xcCSSVersion) == "undefined") { ad["on"] = fb[0]; ad["hy"] = ""; ad["fj"] = ""; ad["hx"] = fb[1]; ae["on"] = ey[0]; ae["hy"] = ex[1]; ae["fj"] = ex[2]; ae["hx"] = ey[1]; af["on"] = es[0]; af["hy"] = ""; af["fj"] = ""; ag["on"] = ""; ag["hy"] = ""; ag["fj"] = ""; ag["hx"] = "" } else if (xcCSSVersion == "2.9") { var ez = xcCSSDayOtherCurrent, fa = xcCSSDayOtherSpecial; ad["on"] = fb[0]; ad["hy"] = fb[1]; ad["fj"] = fb[2]; ad["hx"] = fb[3]; ae["on"] = ey[0]; ae["hy"] = ey[1]; ae["fj"] = ey[2]; ae["hx"] = ey[3]; af["on"] = ez[0]; af["hy"] = ez[1]; af["fj"] = ez[2]; ag["on"] = fa[0]; ag["hy"] = fa[1]; ag["fj"] = fa[2]; ag["hx"] = fa[3] } };
    </script>
    <script language="javascript">
        function PrintTxtFile() {

            f_writeToTxtFile();
            //s = fso.CreateTextFile('C:\\Inetpub\\wwwroot\\Spare\\'+vesselName+'_'+ReqNo+'.htm' , true);

            var vesselName = document.getElementById('txt_VesselName').value;
            var ReqNo = document.getElementById('txtReqNo').value;  //vesselCode 
            var txtFilename = 'print.htm';
            //var txtFilename = document.getElementById('FileUpload').value;
            if (txtFilename == "") {
                alert('Please save / load the file first ');
                return;
            }

            //var pos=txtFilename.lastIndexOf("\\");
            //txtFilename=txtFilename.substring(pos+1,txtFilename.length);

            //var len =txtFilename.length;

            var Filename = txtFilename;

            //var Filename =  'C:\\Inetpub\\wwwroot\\Spare\\'+txtFilename.substring(0,len-4) + ".htm";



            if (Filename == "")
                alert('First Save the form & then Print.');
            else {
                if (Filename.substring(1, 2) == ':') {
                    //Filename='C:\\POS\\'+Filename;    //Olde file name                    
                    //	                 Filename=Filename;                      
                    //	                  
                    //	                //if (f_chkFileExist("XML Filename", document.getElementById('txt_FileName'), 2) == false)return(false);
                    //	                if (f_chkFileExist("XML Filename", Filename, 2) == false)
                    //	                {
                    //	                    return(false);
                    //	                }
                    //	                else
                    //	                {   
                    window.open(Filename);
                    //}//
                }
                else {

                    // Filename='C:\\POS\\'+Filename ;  //Old file  name
                    //Filename=Filename;  

                    //if (f_chkFileExist("XML Filename", document.getElementById('txt_FileName'), 2) == false)return(false);
                    //	                if (f_chkFileExist("XML Filename",Filename, 2) == false)
                    //	                {   
                    //	               
                    //	                    return(false);
                    //	                }
                    //	                else
                    //	                {  

                    window.open(Filename);
                    //}
                }
            }
        }
    </script>
    <script language="javascript" type="text/javascript">

        //function for file name

        function FileName(Objsku) {


            if (IsFileChar(Objsku.value) == false) {
                alert('Invalid char for file name ');
                var objId = Objsku.id;
                var vals = document.getElementById(objId).value;
                //alert(vals.length);
                vals = vals.substring(0, vals.length - 1);
                document.getElementById(objId).value = vals;
                document.getElementById(objId).focus();
                return false;
            }

        }

        function IsFileChar(sText) {
            //alert('file char');
            var ValidChars = "1234567890qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM_-.";
            var IsNumber = true;
            var Char;


            for (i = 0; i < sText.length && IsNumber == true; i++) {
                Char = sText.charAt(i);

                if (ValidChars.indexOf(Char) == -1) {

                    IsNumber = false;
                }
            }
            return IsNumber;

        }
        //end file name function
        function numVal(Objsku) {
            if (IsNumeric(Objsku.value) == false) {
                var objId = Objsku.id;
                var vals = document.getElementById(objId).value;
                //alert(vals.length);
                vals = vals.substring(0, vals.length - 1);
                document.getElementById(objId).value = vals;
                document.getElementById(objId).focus();
                return false;
            }
            if (window.event.keyCode == 13)   //78
            {
                document.getElementById('btnAddRow').click();

            }
        }

        function IsNumeric(sText) {
            var ValidChars = "0123456789.";
            var IsNumber = true;
            var Char;


            for (i = 0; i < sText.length && IsNumber == true; i++) {
                Char = sText.charAt(i);
                if (ValidChars.indexOf(Char) == -1) {
                    IsNumber = false;
                }
            }
            return IsNumber;

        }

        function do_totals1() {

            document.all.pleasewaitScreen.style.pixelTop = (document.body.scrollTop + 50);

            document.all.pleasewaitScreen.style.visibility = "visible";

            window.setTimeout('do_totals2()', 1);

        }



        function do_totals2() {

            lengthy_calculation();

            document.all.pleasewaitScreen.style.visibility = "hidden";

        }



        function lengthy_calculation() {

            var x, y



            for (x = 0; x < 1000000; x++) {

                y += (x * y) / (y - x);

            }

        }

        var currentPosition = 0;
        var newPosition = 0;
        var direction = "Released";
        var currentHeight = 0;
        var offX = 15;          // X offset from mouse position
        var offY = 15;          // Y offset from mouse position
        var divHeight;
        var ie5 = document.all && document.getElementById
        var ns6 = document.getElementById && !document.all
        function updatebox1(mouse, SKU) {

            //			var DivName='pop1'+SKU;
            var DivName = SKU;
            var divObj = document.getElementById(DivName)
            direction = "Pressed";
            //alert(DivName)
            currentPosition = mouse.clientY;
            document.getElementById(DivName).style.zIndex = 1;
            document.getElementById(DivName).style.display = "block";
            document.getElementById(DivName).style.backgroundColor = "#ffffff";
            document.getElementById(DivName).style.position = "absolute";


        }

        function SetDivPosition1(mouse, SKU) {


            var DivName = SKU;

            var divObj = document.getElementById(DivName);
            document.getElementById(DivName).style.display = "block";
            document.getElementById(DivName).style.backgroundColor = "#ffffff";
            document.getElementById(DivName).style.position = "absolute";

            document.getElementById(DivName).style.zIndex = 1;
            if ((parseInt(mouseX(mouse)) + offX) + 420 > window.screen.width)
                document.getElementById(DivName).style.left = ((parseInt(mouseX(mouse)) + offX) - 420) + 'px';
            else
                document.getElementById(DivName).style.left = ((parseInt(mouseX(mouse)) + offX)) + 'px';
            document.getElementById(DivName).style.top = ((parseInt(mouseY(mouse)) + offY) - 200) + 'px';



        }


        function HideBox1(evt, SKU) {

            var DivName = SKU;

            document.getElementById(DivName).style.display = "none";
        }
        //           -----------------------------------------------------------------
        function updatebox11(mouse, SKU) {

            //var DivName='pop11'+SKU;
            var DivName = SKU;

            var divObj = document.getElementById(DivName)
            direction = "Pressed";
            //alert(DivName)
            currentPosition = mouse.clientY;
            document.getElementById(DivName).style.zIndex = 1;
            document.getElementById(DivName).style.display = "block";
            document.getElementById(DivName).style.backgroundColor = "#ffffff";
            document.getElementById(DivName).style.position = "absolute";


        }

        function SetDivPosition11(mouse, SKU) {


            //			var DivName='pop11'+SKU;
            var DivName = SKU;
            var divObj = document.getElementById(DivName);
            document.getElementById(DivName).style.display = "block";
            document.getElementById(DivName).style.backgroundColor = "#ffffff";
            document.getElementById(DivName).style.position = "absolute";

            document.getElementById(DivName).style.zIndex = 1;
            if ((parseInt(mouseX(mouse)) + offX) + 420 > window.screen.width)
                document.getElementById(DivName).style.left = ((parseInt(mouseX(mouse)) + offX) - 420) + 'px';
            else
                document.getElementById(DivName).style.left = ((parseInt(mouseX(mouse)) + offX)) + 'px';
            document.getElementById(DivName).style.top = ((parseInt(mouseY(mouse)) + offY) - 200) + 'px';



        }


        function HideBox11(evt, SKU) {

            //			var DivName='pop11'+SKU;
            var DivName = SKU;
            document.getElementById(DivName).style.display = "none";
        }


        function mouseX(evt) { if (!evt) evt = window.event; if (evt.pageX) return evt.pageX; else if (evt.clientX) return evt.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft); else return 0; }
        function mouseY(evt) { if (!evt) evt = window.event; if (evt.pageY) return evt.pageY; else if (evt.clientY) return evt.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop); else return 0; }
</script>
  	<script type="text/javascript">
  	    
  	    var MaxRowCount = 1;
  	    
  	    var Bool = 0;  // when you click on add new button it is 0 otherwise it would be set to 1(1 means no need to call itemvalidate function) 
  	    function FuncAddRow() {

  	        if (Bool != 1) {
  	            if (ItemValidation() == false) {
  	                return;
  	            }
  	        }
  	        RowSerialNo = RowSerialNo + 1;
  	        MaxRowCount = MaxRowCount + 1;
  	        RowsCount = RowsCount + 1;
  	        document.getElementById('hid_RowCount').value = RowsCount;
  	        //Rownumber = Rownumber  + 1;
  	        var TRScript = "<tr >" +
		    		             "<td><div class='shadow' >" +
		    		             "<table border='0' width='100%' style='border:solid 1px #AEC985' cellpadding='3' cellspacing='0'>" +
					                "<col width='30px' />" +
				                    "<col width='430px'/>" +
				                    "<col width='100px' />" +
				                    "<col width='100px' />" +
				                    "<col width='150px' />" +
				                    "<col width='60px' />" +
				                    "<col width='60px' />" +
				                    "<col width='60px' />" +
				                    "<col width='50px' />" +
        				            "<tr><td id='tdRowNumber" + RowsCount + "'>" + RowSerialNo + "</td>" +
							        "<td>" +
								    "<table cellpadding='0' cellspacing ='0' border='0' width='100%'>" +
									    "<tr>" +
										    "<td>" +
											    "<input type='text' style='width:90%;text-transform:none' id='txtDesc" + RowsCount + "'/> " +
											    "<img src='Add.gif' id='imgShowDetails" + RowsCount + "' height='12px' width='15px' alt='help' title='Click to add details . ' style='cursor:pointer' onclick=\"ShowDescriptionDetails(this);\"/>" +
										    "</td>" +
									    "</tr>" +
									    "<tr>" +
										    "<td>" +
											    "<textarea style='width:90%;height:70px;display:none;margin-right:18px;' id='txtAddedDesc" + RowsCount + "'/></textarea>" +
										    "</td>" +
									    "</tr>" +
								    "</table>" +
							            "</td>" +
							        "<td><input type='text'maxlength='100' style='text-align:left;' class='SmallInput'   id='txtPartNo" + RowsCount + "'/></td>" +
							        "<td>" +
							        "<input type='text'maxlength='100' style='text-align:left;' class='SmallInput'   id='txtDrowingNo" + RowsCount + "'/>" +
							        "</td>" +

							        "<td><input type='text' maxlength='20' style='width:90%' id='txtCodeNo" + RowsCount + "'/></td>" +

							        "<td><input type='text' maxlength='10' style='text-align:right;' class='SmallInput50' onkeypress='fncInputNumericValuesOnly(event)' onfocus='javascript:window.clipboardData.clearData()'  id='txtRFQQty" + RowsCount + "'/></td>" +
							        "<td>" +
							            "<select id='txtUnit" + RowsCount + "'>" + getUnitsHtml() + "</select>" +
							        "</td>" +
							        "<td><input type='text' maxlength='10' style='text-align:right;' onkeypress='fncInputNumericValuesOnly(event);PutNewRow()' onfocus='javascript:window.clipboardData.clearData()' class='SmallInput50'  id='txtROB" + RowsCount + "'/></td>" +
							        "<td><a onclick=\"RemoveMe(this)\" href='#'><img style='cursor:pointer;border:none;' src='del.gif' /></a> </td>" +
							        "</tr></table></div></td></tr>"

  	        var tblRow = document.getElementById('tblAddRowTable');
  	        var tr = document.createElement("tr");
  	        var td = document.createElement("td");
  	        tr.id = "row" + RowsCount;
  	        tr.setAttribute("class", "shadow");
  	        td.innerHTML = TRScript;
  	        tr.appendChild(td)
  	        //document.getElementById("d").insertBefore(,tblRow.childNodes[0].childNodes[0]);


  	        if (tblRow.childNodes[0].childNodes.length > 0)
  	            tblRow.childNodes[0].insertBefore(tr, tblRow.childNodes[0].childNodes[0]);
  	        else
  	            tblRow.childNodes[0].appendChild(tr);

  	        document.getElementById('txtDesc' + RowsCount).focus();
  	        //tblRow.childNodes[0].insertBefore(tr,tblRow.childNodes[0].childNodes[0]);

  	        //tblRow.childNodes[0].appendChild(tr);

  	    }
  	    function RemoveMe(ID) {
  	        var tblRow = document.getElementById('tblAddRowTable');
  	        if (tblRow.childNodes[0].childNodes.length <= 1) {
  	            alert("Can't remove last row");
  	            return;
  	        }
  	        if (window.confirm("Are you sure to remove this row?")) {
  	            var tblRow = document.getElementById('tblAddRowTable');
  	            var RemCtl = ID.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;
  	            //alert(RemCtl.outerHTML);
  	            //alert(tblRow.childNodes[0].innerHTML);
  	            tblRow.childNodes[0].removeChild(RemCtl);

  	            //RowsCount = RowsCount - 1;
  	            RowSerialNo = RowSerialNo - 1;
  	            document.getElementById('hid_RowCount').value = RowsCount;
  	            //PutRowNumber();
  	            //document.getElementById('tt').value=tblRow.childNodes[0].innerHTML;
  	            PutSerialNumber();
  	        }
  	    }
  	    function PutSerialNumber() {
  	        var j = 1;
  	        var tblRow = document.getElementById('tblAddRowTable');
  	        i = tblRow.childNodes[0].childNodes.length - 1;
  	        for (; i >= 0; i--) {
  	            var tdRowNumber = tblRow.childNodes[0].childNodes[i].childNodes[0].childNodes[0].childNodes[0].childNodes[1].childNodes[0].childNodes[0];
  	            if (tdRowNumber != null) {
  	                tdRowNumber.innerHTML = j++;
  	            }
  	        }
  	    }

  	    function ItemValidation() {
  	        // Quantity
  	        var tblRow = document.getElementById('tblAddRowTable');
  	        var x = tblRow.childNodes[0].childNodes.length;

  	        // Validation for Description
  	        var LastRow = tblRow.childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[1].childNodes[0].childNodes[1].childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[0];
  	        if (LastRow.value == "") {
  	            alert('Description is empty');
  	            LastRow.focus();
  	            return false;
  	        }

  	        // Validation for Part#
  	        LastRow = tblRow.childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[1].childNodes[0].childNodes[2].childNodes[0];
  	        if (LastRow.value == "") {
  	            alert('Part# is empty');
  	            LastRow.focus();
  	            return false;
  	        }
  	        // Validation for drowing#
  	        LastRow = tblRow.childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[1].childNodes[0].childNodes[3].childNodes[0];
  	        if (LastRow.value == "") {
  	            alert('Drowing# is empty');
  	            LastRow.focus();
  	            return false;
  	        }
  	        // Validation for Code#
  	        LastRow = tblRow.childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[1].childNodes[0].childNodes[4].childNodes[0];
  	        if (LastRow.value == "") {
  	            alert('Code# is empty');
  	            LastRow.focus();
  	            return false;
  	        }
  	        // Validation for Quantity
  	        LastRow = tblRow.childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[1].childNodes[0].childNodes[5].childNodes[0];
  	        if (LastRow.value == "") {
  	            alert('Quantity is empty');
  	            LastRow.focus();
  	            return false;
  	        }
  	        // Validation for ROB
  	        LastRow = tblRow.childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[1].childNodes[0].childNodes[7].childNodes[0];
  	        if (LastRow.value == "") {
  	            alert('ROB is empty');
  	            LastRow.focus();
  	            return false;
  	        }



  	    }
  	    //        function PutRowNumber()
  	    //        {
  	    //            //alert('int PutRowNumber()');
  	    //            var i =2;
  	    //            var RowNumber=2;
  	    //            
  	    //            //alert('RowsCount  -'+RowsCount);
  	    //            for (i; i <= RowsCount; i++) 
  	    //            {
  	    //                var tdRowNumber = document.getElementById('tdRowNumber'+i);
  	    //                //alert('tdRowNumber'+i);
  	    //                //alert(tdRowNumber);
  	    //                if(tdRowNumber !=null)
  	    //                {
  	    //                    //alert(RowNumber);
  	    //                    tdRowNumber.innerHTML = RowNumber;
  	    //                    tdRowNumber.id="tdRowNumber"+RowNumber;  
  	    //                    
  	    //                    
  	    //                    //txtDesc,txtAddedDesc,txtRFQQty,ddlUnit,txtIssa,txtROB
  	    //                    document.getElementById('txtDesc'+i).id="txtDesc"+RowNumber;
  	    //                    document.getElementById('txtAddedDesc'+i).id="txtAddedDesc"+RowNumber;
  	    //                    //alert('Testing Tag');
  	    //                    document.getElementById('txtPartNo'+i).id="txtPartNo"+RowNumber;
  	    //                    
  	    //                    document.getElementById('txtDrowingNo'+i).id="txtDrowingNo"+RowNumber;
  	    //                    
  	    //                    document.getElementById('txtCodeNo'+i).id="txtCodeNo"+RowNumber;
  	    //                    document.getElementById('txtRFQQty'+i).id="txtRFQQty"+RowNumber;
  	    //                    document.getElementById('txtUnit'+i).id="txtUnit"+RowNumber;
  	    //                    document.getElementById('txtROB'+i).id="txtROB"+RowNumber;
  	    //                  
  	    //                    
  	    //                    var x= "ShowDescriptionDetails('txtAddedDesc" + RowNumber + "')";
  	    //                    document.getElementById('imgShowDetails'+i).setAttribute('onclick',x);
  	    //                    
  	    //                    document.getElementById('imgShowDetails'+i).id="imgShowDetails"+RowNumber;
  	    //                    
  	    //                    
  	    //                    
  	    //                    
  	    //                    
  	    //                    RowNumber= parseInt(RowNumber)+1;
  	    //                }
  	    //            }
  	    //        }
  	    function ShowHide(help1) {
  	        document.getElementById(help1).style.display = (document.getElementById(help1).style.display == "") ? "none" : "";
  	    }
	</script>
	<!--hide script  -->
	<script>

	    function ShowDescriptionDetails(ctl) {
	        ctl = ctl.parentNode.parentNode.nextSibling.childNodes[0].childNodes[0];
	        ctl.style.display = (ctl.style.display == "") ? "none" : "";
	    }
	    //	    function ShowDescriptionDetails(desc) 
	    //	    {   
	    //	        
	    //	        document.getElementById(desc).style.display = (document.getElementById(desc).style.display == "") ? "none" : "";
	    //	        
	    //	    }
	</script>
</head>
<script language="javascript">
    var VERSION = "version 3.0";
    var SIGNONCTR = 10;
    var SIGNOFFCTR = 10;
    var CRCAPCTR = 5;
    var today = f_getCurDate();
    var totRecCount = 0;
    // --------------------------------------------------------------------------------
    // Onloading the form, check the environment setting. Prompt if there is any error
    // --------------------------------------------------------------------------------
    function f_onLoad() {
        var willWork = false;
        if (window.ActiveXObject) {
            var FSO = new ActiveXObject("Scripting.FileSystemObject");
            willWork = true;
            var subDt = document.form_1.txt_Date;
            if (subDt.value == "") {
                subDt.value = f_getCurDate();
            }
        }
        if (!willWork) {
            alert('This only works with a standard installation of Internet Explorer on Microsoft Windows');
        }
    }

    // -----------------------------------
    // Check for Accident Category Injury
    // -----------------------------------
    function CheckInjury(val) {
        var Chk = val.checked;
        if (Chk == true)
            document.getElementById('div_Injury').style.display = "block";
        else
            document.getElementById('div_Injury').style.display = "none";
    }

    // -----------------------------------
    // Remove leading and trailing spaces
    // -----------------------------------
    function f_trim(inpStr) {
        var tmp = inpStr;
        strLength = inpStr.length;
        for (var i = 0; (i < strLength) && ((inpStr.charAt(i) == ' ') || (inpStr.charAt(i) == '\n') || (inpStr.charAt(i) == '\r') || (inpStr.charAt(i) == '\t') || (inpStr.charAt(i) == '\f')); i++) {
            tmp = inpStr.substring(i + 1, strLength);
        }
        inpStr = tmp;
        strLength = tmp.length;
        for (var i = strLength - 1; (i >= 0) && ((inpStr.charAt(i) == ' ') || (inpStr.charAt(i) == '\n') || (inpStr.charAt(i) == '\r') || (inpStr.charAt(i) == '\t') || (inpStr.charAt(i) == '\f')); i--) {
            tmp = inpStr.substring(0, i);
        }
        return tmp;
    }

    // --------------------------------
    // Validate input values from user
    // --------------------------------
    function f_validateForm() {

        //if (f_validateFormDetails() == false) return (false);
        if (f_writeToXMLFile() == false) return (false);
        //f_writeToTxtFile();
    }

    // ----------------------
    // Validate Form Details
    // ----------------------
    function f_validateFormDetails() {

        //** Vessal Name
        if (true) {
            var Vessalname = document.getElementById('txt_VesselName');
            if (f_chkMandatory("Vessal Name#", Vessalname) == false) return (false);
            if (isBlank(Vessalname, "Vessal Name cannot be blank.") == false) { Vessalname.focus(); return false; };


            //** Reqn No.

            var txtReqNo = document.getElementById('txtReqNo');
            if (f_chkMandatory("Requisition No ", txtReqNo) == false) return (false);
            if (isBlank(txtReqNo, "Requisition No cannot be blank.") == false) { txtReqNo.focus(); return false; };


            //** Date
            var evntDate = document.getElementById('txtdate');
            if (f_chkMandatory("Date of Occurrence", evntDate) == false) return (false);
            //if (f_chkDate("Date of Occurrence", evntDate) == false)		return(false);
            //if (f_chkPostDated("Date of Occurrence", evntDate) == false)	return(false);


            //** Department
            var dep = document.getElementById('ddlDepartment');
            if (f_getSelectVal(dep) == "0") {
                alert('Please select the Department.');
                document.getElementById('ddlDepartment').focus(); return (false);
            }

            //** Account Code
            var AccountCode = document.getElementById('ddlAccountCode');
            if (f_getSelectVal(AccountCode) == "0") {
                alert('Please select the Account Code.');
                document.getElementById('ddlAccountCode').focus(); return (false);
            }


            //** Port of Delivery

            //	        var txtPortOfDelivery= document.getElementById('txtPortOfDelivery');
            //	        if (f_chkMandatory("Port of Delivery  ", txtPortOfDelivery) == false)	return(false);
            //	        if (isBlank(txtPortOfDelivery,"Port of delivery cannot be blank.")==false){txtPortOfDelivery.focus(); return false;};

            //  ETA
            //	        var txtETA= document.getElementById('txtETA');
            //	        if (f_chkMandatory("ETA ", txtETA) == false)	return(false);
            //	        if (isBlank(txtETA,"ETA cannot be blank.")==false){txtETA.focus(); return false;};

            // Submitted By
            var txtSubmittedBy = document.getElementById('txtSubmittedBy');
            if (f_chkMandatory("Submitted by ", txtSubmittedBy) == false) return (false);
            if (isBlank(txtSubmittedBy, "Submitted by field cannot be blank.") == false) { txtSubmittedBy.focus(); return false; };



        }
    }

    // ---------------------------------------
    // Atleast one checkbox is checked
    // ---------------------------------------
    function Check(val, fld, msg) {
        var flg = false;
        for (var m = 1; m <= val; m++) {
            var chk = document.getElementById(fld + m);
            if (chk.checked)
                flg = true;
        }
        if (flg == false) { alert('Please select atleast one ' + msg + '.'); return false; }
    }

    // ---------------------------------------
    // Check the input box is inputted or not
    // ---------------------------------------
    function f_chkMandatory(fldname, fld) {
        var val = fld.value;
        if (val == "") {
            alert("Please enter the " + fldname + ".");
            fld.focus();
            return (false);
        }
        return (true);
    }

    // -------------------------------------
    // Check the input date is valid or not
    // -------------------------------------
    function f_chkDate(fldname, fld) {
        var val = fld.value;
        if (val.length > 0) {
            if (f_chkDateFormat(val) == false) {
                alert("Invalid " + fldname + ". Please enter in mm/dd/yyyy format.");
                fld.focus();
                return (false);
            }
        }
        return (true);
    }

    // ------------------
    // Check date format
    // input: dd/mm/yyyy
    // ------------------
    function f_chkDateFormat(s) {
        if (s.length != 10) return (false);
        if (s.substring(2, 3) != '/' || s.substring(5, 6) != '/') return (false);
        if (isNaN(s.substring(0, 2)) || isNaN(s.substring(3, 5)) || isNaN(s.substring(6, 10))) return (false);

        var days = getNoOfDays(s.substring(0, 2), s.substring(6, 10))
        //if (s.substring(0,2) > days || s.substring(0,2) < 1) return (false);
        //if (s.substring(3,5) < 1 || s.substring(3,5) > 12) return (false);
        if (s.substring(3, 5) > days || s.substring(3, 5) < 1) return (false);
        if (s.substring(0, 2) < 1 || s.substring(0, 2) > 12) return (false);
        return (true);
    }

    // ----------------------------------
    // Get the no. of days for the month
    // ----------------------------------
    function getNoOfDays(month, year) {
        var days;
        // RETURN 31 DAYS
        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||
                month == 10 || month == 12) {
            days = 31;
        }
        // RETURN 30 DAYS
        else if (month == 4 || month == 6 || month == 9 || month == 11) {
            days = 30;
        }
        // RETURN 29 DAYS
        else if (month == 2) {
            if (isLeapYear(year)) {
                days = 29;
            }
            // RETURN 28 DAYS
            else {
                days = 28;
            }
        }
        return (days);
    }

    // ----------------------------------
    // Return whether is it a leap year?
    // ----------------------------------
    function isLeapYear(year) {
        if (((year % 4) == 0) && ((year % 100) != 0) || ((year % 400) == 0)) {
            return (true);
        }
        else {
            return (false);
        }
    }

    // -----------------------------------------------
    // Check whether the date inputted is post-dated?
    // -----------------------------------------------
    function f_chkPostDated(fldname, fld) {
        var val = fld.value;
        if (f_cmpDateLE(val, today) == false) {
            alert("Please re-enter the " + fldname + ". Post-dated value is not allowed.");
            fld.focus();
            return (false);
        }
        return (true);
    }

    // -----------------------------------------------
    // Check whethercrew is 18 years or not?
    // -----------------------------------------------
    function f_chkDOB(flddate, fld) {
        var fld = document.getElementById('txt_Inj_DOB');
        var daysgap = 0;
        var age_year;
        date1 = new Date();
        date2 = new Date(flddate);
        var diff = new Date();
        diff.setTime(Math.abs(date1.getTime() - date2.getTime()));
        daysgap = diff.getDate() + (diff.getMonth() * 30) + ((date1.getFullYear() - date2.getFullYear()) * 365) - 1;
        age_year = daysgap / 365;
        if (parseInt(age_year) <= 18) {
            alert('Crew must be at least 18 Years Old.');
            fld.focus();
            return false;
        }
        return true;
    }

    // ----------------------------------------------------------------
    // Compare the dates. If dt1<=dt2, return true. Else, return false
    // ----------------------------------------------------------------
    function f_cmpDateLE(dt1, dt2) {
        var fmtDt1 = new Date(dt1.substring(6, dt1.length), dt1.substring(0, 2) - 1, dt1.substring(3, 5)) //Month is 0-11 in JavaScript
        var fmtDt2 = new Date(dt2.substring(6, dt2.length), dt2.substring(0, 2) - 1, dt2.substring(3, 5)) //Month is 0-11 in JavaScript

        if (fmtDt1 <= fmtDt2)
            return (true);
        else
            return (false);
    }

    // ----------------------------------------
    // Check for blank space
    // ----------------------------------------
    function isBlank(field, msg) {
        field.value = field.value.replace(/(^ +| +$)/, "");
        if (field.value == "") {
            field.focus();
            alert(msg);
            return false;
        }
    }

    // --------------------------------------
    // Get value from the drop down list box
    // --------------------------------------
    function f_getSelectVal(fld) {
        var idx = fld.selectedIndex;
        return (fld[idx].value);
    }

    // -------------------------------------
    // Check Max Length of Crew Id (It should be 6 characters long)
    // -------------------------------------
    function chkmaxlength(field, msg) {
        if (field.value.length < 6) {
            field.focus();
            alert(msg);
            return false;
        }
        else {
            return true;
        }
    }

    // ----------------------------------------
    // Check the input value is numeric or not
    // ----------------------------------------
    function f_chkNumeric(fldname, fld) {
        var val = fld.value;
        if (isNaN(val)) {
            alert("Invalid " + fldname + ". Please enter in numeric format.");
            fld.focus();
            return (false);
        }
        return (true);
    }
    function ifNumeric(field, msg) {
        var digits = "1234567890";
        var temp;
        var idCrwId = field.value.substring(1, field.length);
        var frst = field.value.substring(0, 1);
        if (frst == "S" || frst == "s" || frst == "Y" || frst == "y") {
            for (var i = 0; i < idCrwId.length; i++) {
                temp = idCrwId.substring(i, i + 1);
                if (digits.indexOf(temp) == '-1') {
                    field.focus();
                    alert(msg);
                    return false;
                }
            }
        }
        else
        { alert(msg); return false; }
    }
    function f_LocalTime(fldname, fld) {
        var val = fld.value;
        var matchTime = val.match('^\\d{2}:\\d{2}$');
        if (matchTime == null) {
            alert("Invalid " + fldname + ".");
            fld.focus();
            return (false);
        }
        return (true);
    }

    // -------------------------------
    // Get current date in dd/mm/yyyy
    // -------------------------------
    function f_getCurDate() {
        var today = new Date();
        var day = ((today.getDate() < 10) ? "0" : "") + today.getDate();
        var month = (((today.getMonth() + 1) < 10) ? "0" : "") + (today.getMonth() + 1);
        var year = (today.getYear() < 1000) ? today.getYear() + 1900 : today.getYear();

        //return(day + "/" + month + "/" + year);
        return (month + "/" + day + "/" + year);
    }

    // --------------------------
    // Format and write XML file
    // --------------------------
    function f_writeToXMLFile() {

        
        var FormData = ''; //f_getFormString(document.form_1, true);

        var XML_VER = '<?xml version="1.0" encoding="ISO-8859-1"?>';
        var XML_CC = '<CrewTraining>';
        var XML_VSLCode = '<VesselCode>';
        var XML_CrewNumber = '<CrewNumber>';
        
        try {


            var VesselCode = document.getElementById('lblVesselCode').innerHTML;
            var CrewNumber = document.getElementById('lblCrewNo').innerHTML.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/:/g, "&gt;").replace("?", "&gt;").replace("*", "&gt;");
            
            xmlFilename = VesselCode + '_' + CrewNumber + '.xml';

            var fso, s;
            fso = new ActiveXObject("Scripting.FileSystemObject");
            s = fso.CreateTextFile(xmlFilename, true);
            
            s.writeline(XML_VER);
            s.writeline('<!--' + FormData + '-->');
            s.writeline(XML_CC);
            s.writeline(XML_VSLCode + VesselCode + XML_VSLCode.substring(0, 1) + "/" + XML_VSLCode.substring(1, XML_VSLCode.length));
            s.writeline(XML_CrewNumber + CrewNumber + XML_CrewNumber.substring(0, 1) + "/" + XML_CrewNumber.substring(1, XML_CrewNumber.length));
            
            // Variables of Item Description
            var XML_TrainingDetails = '<TrainingDetails>';
            var XML_PKID = '<TrainingRequirementId>';
            var XML_TrainingID = '<TrainingID>';
            var XML_DueDate = '<DueDate>';
            var XML_FromDate = '<FromDate>';
            var XML_TODate = '<ToDate>';
            var XML_Institute = '<Institute>';
            
            var TrainingID = '';
            var DueDate = '';
            var FromDate = '';
            var ToDate = '';
            var Institute = '';

            var i = 1;
            
            for (i; i <= $MaxRowCount$; i++) {
                var Row = document.getElementById('tr' + i);

                if (Row != null) {

                    s.writeline(XML_TrainingDetails);

                    TrainingID = document.getElementById('hfTrainingID' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    PKID = document.getElementById('hfTrainingRequirementID' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    DueDate = document.getElementById('lblDueDate' + i).innerHTML.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    FromDate = document.getElementById('lblFromDate' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    ToDate = document.getElementById('lblToDate' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    
                    var obInstitute = document.getElementById('ddlInstitute'+i);
                    var Institute = obInstitute.options[obInstitute.selectedIndex].value;

                    s.writeline(XML_TrainingID + TrainingID + XML_TrainingID.substring(0, 1) + "/" + XML_TrainingID.substring(1, XML_TrainingID.length));
                    s.writeline(XML_PKID + PKID + XML_PKID.substring(0, 1) + "/" + XML_PKID.substring(1, XML_PKID.length));
                    s.writeline(XML_DueDate + DueDate + XML_DueDate.substring(0, 1) + "/" + XML_DueDate.substring(1, XML_DueDate.length));
                    s.writeline(XML_FromDate + FromDate + XML_FromDate.substring(0, 1) + "/" + XML_FromDate.substring(1, XML_FromDate.length));
                    s.writeline(XML_TODate + ToDate + XML_TODate.substring(0, 1) + "/" + XML_TODate.substring(1, XML_TODate.length));
                    s.writeline(XML_Institute + Institute + XML_Institute.substring(0, 1) + "/" + XML_Institute.substring(1, XML_Institute.length));

                    s.writeline(XML_TrainingDetails.substring(0, 1) + "/" + XML_TrainingDetails.substring(1, XML_TrainingDetails.length));

                }
            }
            s.writeline(XML_CC.substring(0, 1) + "/" + XML_CC.substring(1, XML_CC.length));
            alert('File is  saved on Desktop with name : ' + xmlFilename);
            s.Close();

            //document.getElementById('FileUpload').value = xmlFilename;

            //alert(document.getElementById('txt_FileName').value + " has been created.");
        }
        catch (err) {
            f_displayScriptErr(err);
            return (false);
        }
    }

    // --------------------------
    // Format and write Txt file
    // --------------------------
    function getCurrentDirectory() {
        var fso = new ActiveXObject("Scripting.FileSystemObject");
        path = unescape(document.location); //replace %20 with " ", etc.
        path = path.substring(8, path.lastIndexOf("/") + 1); //chop off "file:///" and file name
        return path;
    }

    function f_writeToTxtFile() {

        //var len = document.getElementById('txt_FileName').value.length;
        //var xmlFilename = document.getElementById('txt_FileName').value;
        //var txtFilename =  xmlFilename.substring(0,len-4) + ".htm";
        // alert('File Name  '+txtFilename);
        var ac;
        var chkAC;
        var strAccCat = "";
        var as;
        var chkAS;
        var strAccSev = "";
        var ic;
        var chkIC;
        var strInjCat = "";
        var imc;
        var chkIMMC;
        var strImmCau = "";
        var rtc;
        var chkRTC;
        var strRootCau = "";
        var totRecCount = 0;
        try {

            var vesselName = document.getElementById('txt_VesselName').value;
            var ReqNo = document.getElementById('txtReqNo').value;  //vesselCode 

            var fso, s;
            fso = new ActiveXObject("Scripting.FileSystemObject");
            s = fso.CreateTextFile(getCurrentDirectory() + "print.htm", true);
            var ReportDate = document.getElementById('txtdate').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

            var Department = document.getElementById('ddlDepartment');
            var DepartmentValue = Department.options[Department.selectedIndex].text;
            if (DepartmentValue == "Select") { DepartmentValue = ""; }

            var DdlAccCode = document.getElementById('ddlAccountCode');
            var AccountCode = DdlAccCode.options[DdlAccCode.selectedIndex].text;
            if (AccountCode == "Select") { AccountCode = ""; }

            var PortofDelivery = document.getElementById('txtPortOfDelivery').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var eta = document.getElementById('txtETA').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var SubmitedBy = document.getElementById('txtSubmittedBy').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var Remarks = document.getElementById('txtRemark').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            //variable for equipment details
            var EqupName = document.getElementById('txtEqupName').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var ModelType = document.getElementById('txtModelType').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var SerialNo = document.getElementById('txtSerialNo').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var BuiltYear = document.getElementById('txtBuiltYear').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var NameNAddress = document.getElementById('txtNameNAddress').value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

            //vesselCode reportNo  reportDate  rbFamName  rbFrstName  rbRank rbCrew
            s.writeline("<center><span style='font-weight: bold; font-size: large;'>Spare Requisition</span></center><br />");
            s.writeline("<center><span style='font-weight: bold; font-size: large;'>=====================</span></center><br />");
            s.writeline("<center><span style='font-weight: bold; text-align: left; padding-left: 20px'>Vessel Code        :</span> " + vesselName.toUpperCase() + "&nbsp;&nbsp;&nbsp;<span style='font-weight: bold; text-align: left;'>Requisition No        :</span> " + ReqNo.toUpperCase() + "&nbsp;&nbsp;&nbsp;<span style='font-weight: bold; text-align: left;'>Requisition Date : </span>" + ReportDate + "</center><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Reported By :-</span><br />");

            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Department     : </span>" + DepartmentValue + "<br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Account Code      : </span>" + AccountCode + "<br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Port of delivery            : </span>" + PortofDelivery.toUpperCase() + "<br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>ETA         : </span>" + eta + "<br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Submited By         : </span>" + SubmitedBy.toUpperCase() + "<br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Remarks (For SMD office) : </span>");
            s.writeline("<span style='text-align: left;'><div style='padding-left:20px; text-align:justify;width:998;'>" + Remarks + "</div></span><br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Equipment info for Spares :--------- </span><br/>");

            //data for Equipment spare 
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Name of Equipment     : </span>" + EqupName.toUpperCase() + "<br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Model/Type     : </span>" + ModelType.toUpperCase() + "<br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Serial No.     : </span>" + SerialNo.toUpperCase() + "<br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Year Built     : </span>" + BuiltYear + "<br />");
            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20px'>Maker's Name and Address     : </span>" + NameNAddress.toUpperCase() + "<br /><br />");

            s.writeline("<span style='font-weight: bold; text-align: left;padding-left: 20px'>Details         : </span><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Accident Category :</span>&nbsp;" + strAccCat + "<br /><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Accident Severity :</span>&nbsp;" + strAccSev + "<br /><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Company Policy  : </span>&nbsp;" + comPolicy + "<br /><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>D & A Test      : </span>&nbsp;" + daTest + "<br /><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Event :-</span><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Date Of Occurrence : </span>" + eventDate + "<br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Local Time         : </span>" + eventTime + "<br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Vessel's Position  : </span>" + vslPtLat + "&nbsp;" + vslPtLng + "<br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Place              :</span>&nbsp;" + eventPlace + "<br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Description        : </span><div style='text-align: left; padding-left: 38%; padding-right: 20%;'>" + whtHapp + "</div><br />");
            //                if(document.getElementById('div_Injury').style.display=="block")
            //                {
            //                    s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Description of Injury : </span><div style='text-align: left; padding-left: 31%; padding-right: 20%;'>" + injDesc + "</div><br />");
            //                    s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Injured :-</span><br />");
            //		            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Family Name : </span>" + injFamName + "<br />");
            //		            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>First Name  : </span>" + injFstName + "<br />");
            //		            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Rank        : </span>" + injRank + "<br />");
            //		            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Crew Id     : </span>" + injCrewNo + "<br />");
            //		            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Nationality : </span>" + injNatlty + "<br />");
            //		            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>DOB         : </span>" + injDOB + "<br />");
            //		            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Exp.        : </span>" + injExp + "<br />");
            //		            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Emp. From   : </span>" + injEmpFrom + "<br />");
            //		            s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 30%'>Category    : </span>" + strInjCat + "<br /><br />");
            //                }
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Immediate Cause : </span>" + strImmCau + "<br /><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Root Cause      : </span>" + strRootCau + "<br /><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Corrections     : </span><div style='text-align: left; padding-left: 30%; padding-right: 20%;'>" + corrAct + "</div><br />");
            //s.writeline("<span style='font-weight: bold; text-align: left; padding-left: 20%'>Suggestions     : </span><div style='text-align: left; padding-left: 30%; padding-right: 20%;'>" + sugg + "</div><br />");




            s.writeline(" <table border='1'  width='998px' style=' margin-left: 20px;table-layout:fixed;word-wrap:break-word;' cellpadding='3' cellspacing='1' > ");
            s.writeline("<col width='50px'/>");
            s.writeline("<col width='400px'/>");
            s.writeline("<col width='100px'/>");
            s.writeline("<col width='110px'/>");
            s.writeline("<col width='110px'/>");
            s.writeline("<col width='90px'/>");
            s.writeline("<col width='70px'/>");
            s.writeline("<col width='50px'/>");
            s.writeline("<tr>");

            s.writeline("<td style='text-align: center; font-weight:bold'>Sr#</td>");
            s.writeline("<td style='text-align: left; font-weight:bold'>Description</td>");
            s.writeline("<td style='text-align: center; font-weight:bold'>Part#</td>");
            s.writeline("<td style='text-align: center; font-weight:bold'>Drawing#</td>");
            s.writeline("<td style='text-align: center; font-weight:bold'>Code#</td>");
            s.writeline("<td style='text-align: center; font-weight:bold'>RFQ Qty</td>");
            s.writeline("<td style='text-align: center; font-weight:bold'>UOM</td>");
            s.writeline("<td style='text-align: center; font-weight:bold'>ROB</td>");

            s.writeline("</tr>");
            var temDesc;
            var AddedDesc;
            var PartNO;
            var DrawingNo;
            var CodeNo;
            var RFQQty;
            var Unit;
            var ROB;

            //tblRow.childNodes[0].childNodes.length 
            var i = 1;
            var Sno = 0;
            var tblRow = document.getElementById('tblAddRowTable');


            for (i; i <= MaxRowCount; i++) {

                row = document.getElementById('tdRowNumber' + i);
                //                    if(i==1)
                //                    {
                //                        row="this is only to set row as not null";
                //                    }else
                //                    {
                //                        row=document.getElementById('tdRowNumber'+i);
                //                    }
                //                     
                if (row != null) {
                    Sno = Sno + 1;
                    temDesc = document.getElementById('txtDesc' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    AddedDesc = document.getElementById('txtAddedDesc' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    DrawingNo = document.getElementById('txtDrowingNo' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    PartNO = document.getElementById('txtPartNo' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    CodeNo = document.getElementById('txtCodeNo' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"); ;
                    RFQQty = document.getElementById('txtRFQQty' + i).value;
                    Unit = document.getElementById('txtUnit' + i).value.replace("'", "\'").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    Rob = document.getElementById('txtROB' + i).value;


                    s.writeline("<tr>");
                    s.writeline("<td style='text-align: center'>" + Sno + "</td>");
                    s.writeline("<td style='text-align:justify;'> <b>" + temDesc + "</b>  <br/><br/><div style='text-align:justify;' >" + AddedDesc + " </div>  </td>");
                    s.writeline("<td style='text-align: center'>" + PartNO.toUpperCase() + "&nbsp;</td>");
                    s.writeline("<td style='text-align: center'>" + DrawingNo.toUpperCase() + "&nbsp;</td>");
                    s.writeline("<td style='text-align: center'>" + CodeNo.toUpperCase() + "&nbsp;</td>");
                    s.writeline("<td style='text-align: right'>" + RFQQty + "&nbsp;</td>");
                    s.writeline("<td style='text-align: center'>" + Unit + "&nbsp;</td>");
                    s.writeline("<td style='text-align: center'>" + Rob + "&nbsp;</td>");

                    s.writeline("</tr>");
                }
            }
            s.writeline("</table>");
            s.Close();
            //alert(vesselName+'_'+ReqNo+'.htm'  + " has been created.");
        }
        catch (err) {
            f_displayScriptErr(err);
            return (false);
        }
    }

    // ---------------------------------
    // Check the filename exists or not
    // ---------------------------------
    function f_chkFileExist(fldname, fld, ind) {

        if (ind == 1)
            ind = "SAVE";
        else if
	        (ind == 2) ind = "OPEN";

        try {
            var FSO = new ActiveXObject("Scripting.FileSystemObject");
            if (ind == "OPEN") {

                if (!FSO.FileExists(fld)) {
                    alert(fld + " does not exists. Please select a valid file.");
                    fld.focus();
                    return (false);
                }
                else {

                    return (true);
                }
            }
            if (ind == "SAVE") {
                if (FSO.FileExists(fld)) {
                    var ans = confirm(fld + " already exists. Do you want to overwrite?\n\nOK=Yes , Cancel=No");
                    if (ans == true) {
                        return (true);
                    }
                    else {
                        fld.focus();
                        return (false);
                    }
                }
            }
        }
        catch (err) {
            f_displayScriptErr(err);
            return (false);
        }
        return (true);
    }

    // -----------------------------------------
    // Check the file extension is valid or not
    // -----------------------------------------
    function f_chkFileExt(fldname, fld, ext) {
        var val = fld.value;
        len = val.length;
        if ((val.substring(len - 4, len) != ext) && (val.substring(len - 4, len) != ext.toUpperCase())) {
            alert('Invalid file extension for ' + fldname + '.\nPlease input the filename with ' + ext + ' extension.');
            fld.focus();
            return (false);
        }
        return (true);
    }

    // -----------------------
    // Display error messages
    // -----------------------
    function f_displayScriptErr(err) {
        var errNo = err.number;
        //** Path not found
        if (errNo == "-2146828212") {
            alert("Invalid directory path. Please re-enter a valid path.");
        }
        //** Automation server cant create object)
        else if (errNo == "-2146827859") {
            alert('Please refresh this page (or press F5).\n\nAnd, select "Yes" to allow an ActiveX control to interact with other parts of this page.');
        }
        else {
            var strErr = 'Error: ';
            strErr += '\nNumber:' + err.number;
            strErr += '\nDescription:' + err.description;
            alert(strErr);
        }
    }

    // ----------------------------
    // Set the version of the ENG2A
    // ----------------------------
    function f_setVersion() {
        document.form_1.hid_version.value = VERSION;
    }

    // ---------------------------------
    // Get all the values from the Form
    // ---------------------------------
    function f_getFormString(formRef, oAndPass) {


        for (var x = 0, oStr = '', y = false; formRef.elements[x]; x++) {
            if (formRef.elements[x].type) {
                var oE = formRef.elements[x]; var oT = oE.type.toLowerCase();
                if (oT == 'text' || oT == 'textarea' || oT == 'hidden' || (oT == 'password' && oAndPass)) {
                    oStr += (y ? ',' : '') + oE.value.replace(/%/g, '%p').replace(/,/g, '%c');
                    y = true;
                } else if (oT == 'radio' || oT == 'checkbox') {
                    oStr += (y ? ',' : '') + (oE.checked ? '1' : '');
                    y = true;
                } else if (oT == 'select-one') {
                    oStr += (y ? ',' : '') + oE.selectedIndex;
                    y = true;
                } else if (oT == 'select-multiple') {
                    for (var oO = oE.options, i = 0; oO[i]; i++) {
                        oStr += (y ? ',' : '') + (oO[i].selected ? '1' : '');
                        y = true;
                    }
                }
            }
        }

        return oStr;
    }

    // ----------------------------------
    // Save to file as specified by user
    // ----------------------------------
    function f_setRowCount() {
        var tblRow = document.getElementById('tblAddRowTable');
        //alert('setRowCount'+tblRow.childNodes[0].childNodes.length);
        document.getElementById('hid_RowCount').value = tblRow.childNodes[0].childNodes.length;
    }
    function f_saveToFile(oText) {
        //specify the file name

        var filename = document.getElementById("txt_DatFileName");

        if (f_chkMandatory("XML FileName", filename) == false) return (false);
        if (isBlank(filename, "XML FileName cannot be blank.") == false) { filename.focus(); return false; };
        if (f_chkFileExt("Filename", filename, ".dat") == false) return (false);
        if (f_chkFileExist("Filename", filename.value, 1) == false) return (false);

        try {
            var FSO = new ActiveXObject("Scripting.FileSystemObject");
            var theFile = FSO.OpenTextFile(filename.value, 2, true);
            theFile.write(oText);
            theFile.close();
            alert("Values have been saved to : " + filename.value);
        }
        catch (err) {
            f_displayScriptErr(err);
            return (false);
        }
    }

    // ----------------------------------------
    // Read from the file selected by the user
    // ----------------------------------------
    function f_readFromFile() {
        //specify the file name

        document.getElementById("FileUpload").click();



        var FilePath = document.getElementById('FileUpload').value;
        var ext = FilePath.substring(FilePath.length - 3, FilePath.length);
        if (ext != "xml") {
            alert('Please select a valid xml file only.');
            return;
        }




        var filename = document.getElementById("FileUpload");


        //if (f_chkFileExt("Filename", filename, ".dat") == false)	return(false);
        //if (f_chkFileExist("Filename", filename.value, 2) == false)		return(false);
        try {
            var FSO = new ActiveXObject("Scripting.FileSystemObject");
            if (FSO.FileExists(filename.value)) {
                var theFile = FSO.OpenTextFile(filename.value, 1, false);
                var oOut = theFile.readAll();
                theFile.close();
                return oOut.substring(49, oOut.indexOf("-->"));
            }
            else {
                return null;
            }
        }
        catch (err) {
            f_displayScriptErr(err);
            return (false);
        }








        //	        var filename = document.getElementById("txt_DatFileName");
        //	        
        //	        if (f_chkFileExt("Filename", filename, ".dat") == false)	return(false);
        //	           
        //	        if (f_chkFileExist("Filename", filename.value, 2) == false)		return(false);
        //                
        //	        try {
        //		        var FSO = new ActiveXObject("Scripting.FileSystemObject");
        //		        if(FSO.FileExists(filename.value)) {
        //			        var theFile = FSO.OpenTextFile(filename.value, 1, false);
        //			        var oOut = theFile.readAll();
        //			        theFile.close();
        //			        return oOut;
        //		        } else {
        //			        return null;
        //		        }
        //	        }
        //	        catch(err) {
        //		        f_displayScriptErr(err);
        //		        return (false);
        //	        }
    }

    // ----------------------------------------------------------
    // Put back the values into the form based on the input file
    // ----------------------------------------------------------
    function f_recoverInputs(formRef, oStr, oAndPass) {

        //            var TotalRows=oStr.substring(0,1);
        //            
        //            RowsCount=1;
        //            

        //	        var filename = document.getElementById("txt_DatFileName");
        //var filename = document.getElementById("txt_FileName");


        if (oStr) {

            oStr = oStr.split(',');

            //RowsCount=1;

            var TotalRows = oStr[0];
            //                var x=TotalRows;
            var x = RowsCount;

            //                for(x;x>1;x--)
            //                {  
            //                    RowsCount=RowsCount-1;
            //                    alert('RowsCount  '+RowsCount);
            //                   var tblRow = document.getElementById('tblAddRowTable');
            //                   var TrObj= document.getElementById('tdRowNumber'+x);
            //                   
            //                   if(TrObj!=null)
            //                   {
            //                    tblRow.childNodes[0].removeChild(tblRow.childNodes[0].firstChild);
            //                   }
            //                }
            var j = 2;
            var tblRow = document.getElementById('tblAddRowTable');
            i = tblRow.childNodes[0].childNodes.length - 1;
            for (; i >= 0; i--) {
                tblRow.childNodes[0].removeChild(tblRow.childNodes[0].childNodes[i]);
            }

            RowsCount = 0;
            Rownumber = 1;
            MaxRowCount = 1;
            lastRowNumber = 0;
            RowSerialNo = 0;

            for (i = 1; i <= parseInt(TotalRows); i++) {
                Bool = 1;
                document.getElementById('btnAddRow').click();
            }
            Bool = 0;
            // no. will changes if the no. of field in the form changed.
            // alert(oStr.length);
            //		        if (oStr.length != ) {
            //			        alert("The content of this .dat file is invalid.\nPlease use the correct .dat file.");
            //			        return (false);
            //		        }

            for (var x = 0, y = 0; formRef.elements[x]; x++) {
                if (formRef.elements[x].type) {
                    var oE = formRef.elements[x]; var oT = oE.type.toLowerCase();
                    if (oT == 'text' || oT == 'textarea' || oT == 'hidden' || (oT == 'password' && oAndPass)) {
                        oE.value = oStr[y].replace(/%c/g, ',').replace(/%p/g, '%');
                        y++;
                    } else if (oT == 'radio' || oT == 'checkbox') {
                        oE.checked = oStr[y] ? true : false;
                        y++;
                    } else if (oT == 'select-one') {
                        oE.selectedIndex = parseInt(oStr[y]);
                        y++;
                    } else if (oT == 'select-multiple') {
                        for (var oO = oE.options, i = 0; oO[i]; i++) {
                            oO[i].selected = oStr[y] ? true : false;
                            y++;
                        }
                    }
                }
            }
            PutSerialNumber();
            //		        inputVersion = formRef.hid_version.value;
            //		        if (inputVersion != VERSION) {
            //			        alert("The content of this .dat file is invalid.\nPlease use the correct .dat file.");
            //			        formRef.reset();
            //		        }
            //		        else {
            //	                CheckInjury(document.getElementById('chkAcat_1'));
            //			        alert("Values have been loaded from: " + filename.value);
            //		        }
        }
    }
    //alert('2247');
    //  alert(document.getElementById('txtReqNo'));
    //document.getElementById('txtReqNo').focus();   
    </script>

<body style="text-align :center">
<form name="Form"  method="post"  action="" >
<center>
    <div style="text-align:left;width :100%;">
        <table width="100%">
        <tr class="Heading" style=" background-color :#7AAAD2;color:White; font-size:18px; font-weight:bold;">
            <td style="text-align:center">
                <span> Crew Training</span>
                <input type="text" class="val" style="width: 150px; display:none;" value="" size="20" maxlength="255" id="txt_FileName" />
            </td>
        </tr>
       
        <tr>
            <td>
                <table width="100%" style=" border-right:solid 2px #4371a5;border-bottom:solid 2px #4371a5;" class="shadow">
                    <tr>
                        <td style="width:60%"></td>
                        <td style="padding-right:2px; text-align:right;">
                            <input type="button" value="Save" onclick="f_validateForm()"/>
                            
                            <!--<input type="button" onclick="f_recoverInputs(this.form, f_readFromFile(), true);" value="Load" />-->
                            <input type="file" id="FileUpload" style="display:none;" />
                            
                            <input  type="reset" value="Reset" />
                            
                            <input type="button" value="Print" onclick="return PrintTxtFile();" style="display:none;" />
                        </td>
                        <td></td>
                    </tr>
                </table>
            </td>
        </tr>
        
       <!--Header ----------------------------------------------------------------------->
        <tr>
            <td style="background-color:#c2c2c2;" >
                <table cellpadding="2" cellspacing="0" rules="none">
                    <col width="110px" />
                    <col width="220px" />
                    <col width="80px" />
                    <col width="220px" />
                    <col width="80px" />
                    <col />
                    <tr>
                        <td>Vessel Code :</td>
                        <td> <label  id="lblVesselCode"> $VESSELCODE$</label></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>Crew# :</td>
                        <td> <label id="lblCrewNo" >$CREWNUMBER$</label> </td>
                        <td>Crew Name :</td>
                        <td> <label id="lblCrewNumber" >$CREWNAME$</label> </td>
                        <td>Rank :</td>
                        <td> <label id="lblRank" >$RANK$</label> </td>
                    </tr>
                </table>
            </td>
        </tr>
        
        <!--Data Row ----------------------------------------------------------------------->
        <tr>
            <td>
                <table cellpadding="2" cellspacing="0" width="100%" rules="rows" >
                    <col width="70px" />
                    <col />
                    <col width="180px" />
                    <col width="180px" />
                    <col width="180px" />
                    <col width="180px" />
                    <tr style="background-color:#C2C2C2;">
                        <td>Sr.#</td>
                        <td>Training Name</td>
                        <td>Due Date</td>
                        <td>From Date</td>
                        <td>To Date</td>
                        <td>Institute</td>
                    </tr>
                    $DATAROWS$
                                  
                </table>
            </td>
        </tr>
     
        <tr>
            <td>
                <table width="100%" style=" border-right:solid 2px #4371a5;border-bottom:solid 2px #4371a5;" class="shadow">
                    <tr>
                        <td style="width:60%"></td>
                        <td style="padding-right:2px; text-align:right;">
                            <input type="button" value="Save" onclick="f_validateForm()"/>
                            
                            <!--<input type="button" onclick="f_recoverInputs(this.form, f_readFromFile(), true);" value="Load" />-->
                            <input type="file" id="File1" style="display:none;" />
                            
                            <input  type="reset" value="Reset" />
                            
                            <input type="button" value="Print" onclick="return PrintTxtFile();" style="display:none;"  />
                        </td>
                        <td></td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
    </div>
</center>
</form>
</body>
</html>
